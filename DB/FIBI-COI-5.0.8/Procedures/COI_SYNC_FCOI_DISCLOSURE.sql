DELIMITER //
CREATE PROCEDURE `COI_SYNC_FCOI_DISCLOSURE`(
    IN AV_DISCLOSURE_ID INT,
    	IN AV_DISCLOSURE_NUMBER INT,
        IN AV_PERSON_ID VARCHAR(40)
    )
    BEGIN

    DECLARE LI_PERSON_ID            VARCHAR(40);
    DECLARE LI_DISCLOSURE_STATUS    INT(3);
    DECLARE LI_LOCK_ACQUIRED 		INT 	DEFAULT 0;
    DECLARE LI_FCOI_TYPE_CODE		INT(3);
    DECLARE ERRMSG 					TEXT DEFAULT '';

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
    	UPDATE COI_DISCLOSURE SET SYNC_NEEDED = "Y" WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID;

        -- Release the lock if it was acquired
        SET LI_LOCK_ACQUIRED = RELEASE_LOCK('coi_sfi_projects_lock');

        -- Resignal the exception with the custom error message
        RESIGNAL;
    END;

    SELECT GET_LOCK('coi_sfi_projects_lock', 30) INTO LI_LOCK_ACQUIRED;
    IF LI_LOCK_ACQUIRED = 1 THEN

        BEGIN

    		SELECT REVIEW_STATUS_CODE, PERSON_ID, FCOI_TYPE_CODE INTO LI_DISCLOSURE_STATUS, LI_PERSON_ID, LI_FCOI_TYPE_CODE FROM COI_DISCLOSURE WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID;

    		IF LI_PERSON_ID != AV_PERSON_ID THEN
    			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Disclosure person id is not matching with attempting person id.';
    		END IF;

    		IF FIND_IN_SET(LI_DISCLOSURE_STATUS, '1,5,6') < 1 THEN
    			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Disclosure Status code is not In Progress/Withdrawn/Returned state. Exiting procedure.';
    		END IF;
            -- LI_FCOI_TYPE_CODE 2 is Project Disclosure we need FCOI type here

    		IF LI_FCOI_TYPE_CODE != 2 THEN
    			/*	START TRANSACTION;
                    			-- The below script updates an IP to award, if IP becomes funded.
                WITH excluded_module_item_keys AS (
                    SELECT MODULE_ITEM_KEY
                    FROM COI_DISCL_PROJECTS
                    WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID
                    AND MODULE_CODE = 1
                )
                UPDATE COI_DISCL_PROJECTS T1
                INNER JOIN (
                    SELECT t1.LINKED_AWARD_PROJECT_NUMBER, t1.KEY_PERSON_ID, MAX(t1.PROPOSAL_NUMBER) AS PROPOSAL_NUMBER
                    FROM COI_PROJECT_INSTITUTE_PROPOSAL_V t1
                    inner join COI_DISCL_PROJECTS t2 on (t1.PROPOSAL_NUMBER = t2.MODULE_ITEM_KEY and t2.MODULE_CODE = 2)
                    WHERE t1.LINKED_AWARD_PROJECT_NUMBER IS NOT null and t2.DISCLOSURE_ID = AV_DISCLOSURE_ID
                    GROUP BY t1.LINKED_AWARD_PROJECT_NUMBER
                ) T2 ON T2.PROPOSAL_NUMBER = T1.MODULE_ITEM_KEY AND T1.MODULE_CODE = 2
                INNER JOIN COI_DISCLOSURE T3 ON T3.DISCLOSURE_ID = T1.DISCLOSURE_ID
                SET T1.MODULE_ITEM_KEY = T2.LINKED_AWARD_PROJECT_NUMBER, T1.MODULE_CODE = 1
                WHERE T1.MODULE_CODE = 2
                    AND T3.PERSON_ID = T2.KEY_PERSON_ID
                    AND T1.DISCLOSURE_ID = AV_DISCLOSURE_ID
                    AND T2.LINKED_AWARD_PROJECT_NUMBER NOT IN (
                        SELECT MODULE_ITEM_KEY FROM excluded_module_item_keys
                    );
                COMMIT; */
    			START TRANSACTION;
    			    -- Inserting not added projects, works only in the case of FCOI disclosure.
    				CALL COI_SYNC_INSERT_DISCL_PROJECTS(AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, AV_PERSON_ID);
    			COMMIT;

    		    START TRANSACTION;

    		    -- Deletes the projects from a FCOI disclosure based on certain conditions below
    		        -- For award status should be Active/Closed/Pending(1/5/3)
    		        -- Fow IP it should be pending(1)
    		        -- Person should satisfy the condition for sponsor requirements or PCK

                    DELETE T4, T3, T2, T1
                    FROM COI_DISCL_PROJECTS T1
                    LEFT JOIN COI_DISCL_PROJECT_ENTITY_REL T2 ON T2.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID
                    LEFT JOIN DISCL_COMMENT T3 ON T3.SUB_MODULE_ITEM_KEY = T2.COI_DISCL_PROJECT_ENTITY_REL_ID
                        AND (T3.COMPONENT_TYPE_CODE = '1' OR T3.COMPONENT_TYPE_CODE = '6')  AND T3.MODULE_ITEM_KEY = T1.DISCLOSURE_ID
                    LEFT JOIN COI_CONFLICT_HISTORY T4 on T4.COI_DISCL_PROJECT_ENTITY_REL_ID = T2.COI_DISCL_PROJECT_ENTITY_REL_ID
                    WHERE T1.DISCLOSURE_ID = AV_DISCLOSURE_ID
    				AND (
    					(T1.MODULE_CODE = 3 AND T1.MODULE_ITEM_KEY NOT IN (
    						SELECT T1.EXTERNAL_SYSTEM_REF_ID
    						FROM COI_PROJECT_PROPOSAL_V T1
    						INNER JOIN COI_PROJECT_TYPE T4 ON T4.COI_PROJECT_TYPE_CODE = T1.COI_PROJECT_TYPE_CODE
    						WHERE T1.KEY_PERSON_ID = AV_PERSON_ID
    						AND T4.FCOI_NEEDED = 'Y' 
    					))
    					OR
    					(T1.MODULE_CODE = 2 AND T1.MODULE_ITEM_KEY NOT IN (
    						SELECT T1.PROPOSAL_NUMBER
    						FROM COI_PROJECT_INSTITUTE_PROPOSAL_V T1
    						LEFT JOIN SPONSOR_DISCLOSURE_REQUIREMENTS T2 ON T2.SPONSOR_CODE = T1.SPONSOR_CODE
    						LEFT JOIN SPONSOR_DISCLOSURE_REQUIREMENTS T3 ON T3.SPONSOR_CODE = T1.PRIME_SPONSOR_CODE
    						INNER JOIN COI_PROJECT_TYPE T4 ON T4.COI_PROJECT_TYPE_CODE = T1.COI_PROJECT_TYPE_CODE
    						WHERE T1.KEY_PERSON_ID = AV_PERSON_ID AND T1.PERSON_STATUS != 'I'
    						AND T1.LINKED_AWARD_PROJECT_NUMBER IS NULL
    						AND (((T2.KEY_PERSON_DISCL_REQUIREMENT = 'ALL' OR ( T2.KEY_PERSON_DISCL_REQUIREMENT = 'PI-COI' AND T1.KEY_PERSON_ROLE_CODE IN(1,3)))
    								OR (T3.KEY_PERSON_DISCL_REQUIREMENT = 'ALL' OR (T3.KEY_PERSON_DISCL_REQUIREMENT = 'PI-COI' AND T1.KEY_PERSON_ROLE_CODE IN(1,3))))
    							OR ((T1.PCK = 'PC' AND T1.KEY_PERSON_ROLE_CODE IN(1,3))
                                        OR (T1.PCK = 'PCK' AND T1.KEY_PERSON_ROLE_CODE IN(1,2,3))
                                )
    						)
    						AND T1.PROPOSAL_STATUS_CODE IN (1)
    						AND T4.FCOI_NEEDED = 'Y' 
    					))
    					OR
    					(T1.MODULE_CODE = 1 AND T1.MODULE_ITEM_KEY NOT IN (
    						SELECT T1.AWARD_NUMBER
    						FROM COI_PROJECT_AWARD_V T1
    						LEFT JOIN SPONSOR_DISCLOSURE_REQUIREMENTS T2 ON T2.SPONSOR_CODE = T1.SPONSOR_CODE
    						LEFT JOIN SPONSOR_DISCLOSURE_REQUIREMENTS T3 ON T3.SPONSOR_CODE = T1.PRIME_SPONSOR_CODE
    						INNER JOIN COI_PROJECT_TYPE T4 ON T4.COI_PROJECT_TYPE_CODE = T1.COI_PROJECT_TYPE_CODE
    						WHERE T1.KEY_PERSON_ID = AV_PERSON_ID AND T1.PERSON_STATUS != 'I'
    						AND (((T2.KEY_PERSON_DISCL_REQUIREMENT = 'ALL' OR ( T2.KEY_PERSON_DISCL_REQUIREMENT = 'PI-COI' AND T1.KEY_PERSON_ROLE_CODE IN(1,3)))
    								OR (T3.KEY_PERSON_DISCL_REQUIREMENT = 'ALL' OR (T3.KEY_PERSON_DISCL_REQUIREMENT = 'PI-COI' AND T1.KEY_PERSON_ROLE_CODE IN(1,3))))
    							OR ((T1.PCK = 'PC' AND T1.KEY_PERSON_ROLE_CODE IN(1,3))
                                    OR (T1.PCK = 'PCK' AND T1.KEY_PERSON_ROLE_CODE IN(1,2,3))
                                )
    						)
    						AND T1.AWARD_STATUS_CODE IN (1,6,3)
    						AND T4.FCOI_NEEDED = 'Y' 
    					))
    				);
    		    COMMIT;
            END IF;
    		START TRANSACTION;
    		-- Updating the relation on person entity (SFI) versioning
    		    -- should met the condition for Financial relationship
    		    -- SFI should be active
    		    -- latest ID of SFI version will be updated on PERSON_ENTITY_ID column and previous will be updated on PREVIOUS_PERSON_ENTITY_ID
    			UPDATE COI_DISCL_PROJECT_ENTITY_REL AS T
    				INNER JOIN COI_DISCL_PROJECTS T0 ON T0.COI_DISCL_PROJECTS_ID = T.COI_DISCL_PROJECTS_ID
    				JOIN(SELECT DISTINCT T1.PERSON_ENTITY_ID AS PREVIOUS_PERSON_ENTITY_ID,T2.PERSON_ENTITY_ID, T1.PERSON_ENTITY_NUMBER
    						FROM COI_DISCL_PROJECT_ENTITY_REL T1
    						INNER JOIN COI_DISCL_PROJECTS T ON T.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID
    						INNER JOIN PERSON_ENTITY T2 ON T2.PERSON_ENTITY_NUMBER = T1.PERSON_ENTITY_NUMBER
    						INNER JOIN PERSON_ENTITY_RELATIONSHIP T3 ON T3.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID
    						INNER JOIN VALID_PERSON_ENTITY_REL_TYPE T4 ON T4.VALID_PERS_ENTITY_REL_TYP_CODE = T3.VALID_PERS_ENTITY_REL_TYP_CODE
    						WHERE T2.VERSION_STATUS='ACTIVE' AND T4.DISCLOSURE_TYPE_CODE = '1' AND T1.PERSON_ENTITY_ID != T2.PERSON_ENTITY_ID
    						AND T.DISCLOSURE_ID = AV_DISCLOSURE_ID
    					) AS T6 ON T6.PERSON_ENTITY_NUMBER = T.PERSON_ENTITY_NUMBER
    				SET T.PREVIOUS_PERSON_ENTITY_ID = T6.PREVIOUS_PERSON_ENTITY_ID, T.PERSON_ENTITY_ID = T6.PERSON_ENTITY_ID, T.UPDATE_TIMESTAMP = utc_timestamp()
    				WHERE T.PERSON_ENTITY_NUMBER = T6.PERSON_ENTITY_NUMBER AND T0.DISCLOSURE_ID = AV_DISCLOSURE_ID;
    		COMMIT;

    		START TRANSACTION;
    		-- Inserting when a new SFI come
    		    -- should met the condition for Financial relationship
                -- SFI should be active
    			INSERT INTO COI_DISCL_PROJECT_ENTITY_REL (`COI_DISCL_PROJECTS_ID`, `PERSON_ENTITY_ID`, `PERSON_ENTITY_NUMBER`, `ENTITY_ID`, `UPDATE_TIMESTAMP`, `UPDATED_BY`)
    				SELECT DISTINCT T1.COI_DISCL_PROJECTS_ID, T2.PERSON_ENTITY_ID, T2.PERSON_ENTITY_NUMBER, T2.ENTITY_ID, utc_timestamp(), AV_PERSON_ID
    				FROM COI_DISCL_PROJECTS T1
    				INNER JOIN (SELECT t1.PERSON_ENTITY_ID, t1.PERSON_ENTITY_NUMBER, t1.ENTITY_ID
    					FROM PERSON_ENTITY t1
    					INNER JOIN PERSON_ENTITY_RELATIONSHIP t2 ON t2.PERSON_ENTITY_ID = t1.PERSON_ENTITY_ID
    					INNER JOIN VALID_PERSON_ENTITY_REL_TYPE t3 ON t3.VALID_PERS_ENTITY_REL_TYP_CODE = t2.VALID_PERS_ENTITY_REL_TYP_CODE
    					WHERE t1.VERSION_STATUS = 'ACTIVE' AND t3.DISCLOSURE_TYPE_CODE = '1' AND t1.PERSON_ID = AV_PERSON_ID
    				) T2 ON T1.COI_DISCL_PROJECTS_ID IS NOT NULL
    				LEFT JOIN COI_DISCL_PROJECT_ENTITY_REL T3 ON T3.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID AND T3.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID
    				WHERE T1.DISCLOSURE_ID = AV_DISCLOSURE_ID AND T3.COI_DISCL_PROJECTS_ID IS NULL;
    		COMMIT;

    		START TRANSACTION;
    		-- Deleting an SFI relation when it is Inactivated
    			DELETE T4, T2, T FROM COI_DISCL_PROJECT_ENTITY_REL T
    				INNER JOIN COI_DISCL_PROJECTS T0 ON T0.COI_DISCL_PROJECTS_ID = T.COI_DISCL_PROJECTS_ID
    				LEFT JOIN  DISCL_COMMENT T2 ON T2.SUB_MODULE_ITEM_KEY = T.COI_DISCL_PROJECT_ENTITY_REL_ID
    				    AND (T2.COMPONENT_TYPE_CODE = '1' OR T2.COMPONENT_TYPE_CODE = '6') AND T2.MODULE_ITEM_KEY = T0.DISCLOSURE_ID
    				INNER JOIN (
    					SELECT DISTINCT T2.PERSON_ENTITY_ID, T1.PERSON_ENTITY_NUMBER
    					FROM COI_DISCL_PROJECT_ENTITY_REL T1
    					INNER JOIN COI_DISCL_PROJECTS t0 ON t0.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID
    					INNER JOIN PERSON_ENTITY T2 ON T2.PERSON_ENTITY_NUMBER = T1.PERSON_ENTITY_NUMBER
    					LEFT JOIN PERSON_ENTITY_RELATIONSHIP T3 ON T3.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID
    					LEFT JOIN VALID_PERSON_ENTITY_REL_TYPE T4 ON T4.VALID_PERS_ENTITY_REL_TYP_CODE = T3.VALID_PERS_ENTITY_REL_TYP_CODE
    					WHERE (T2.VERSION_STATUS='INACTIVE' OR T3.PERSON_ENTITY_ID IS NULL
    						OR NOT EXISTS (
    							SELECT 1 FROM PERSON_ENTITY_RELATIONSHIP T3_1
    							INNER JOIN VALID_PERSON_ENTITY_REL_TYPE T4_1 ON T4_1.VALID_PERS_ENTITY_REL_TYP_CODE = T3_1.VALID_PERS_ENTITY_REL_TYP_CODE
    							WHERE T3_1.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID AND T4_1.DISCLOSURE_TYPE_CODE = '1'
    						)
    					) AND T1.PERSON_ENTITY_NUMBER = T2.PERSON_ENTITY_NUMBER
    					AND T2.VERSION_STATUS != 'ARCHIVE' AND t0.DISCLOSURE_ID = AV_DISCLOSURE_ID
    				) AS T3 ON T3.PERSON_ENTITY_NUMBER = T.PERSON_ENTITY_NUMBER
    				LEFT JOIN COI_CONFLICT_HISTORY T4 on T4.COI_DISCL_PROJECT_ENTITY_REL_ID = T.COI_DISCL_PROJECT_ENTITY_REL_ID
    				WHERE T.PERSON_ENTITY_NUMBER = T3.PERSON_ENTITY_NUMBER AND T0.DISCLOSURE_ID = AV_DISCLOSURE_ID;
    		COMMIT;

    		UPDATE COI_DISCLOSURE SET SYNC_NEEDED = "N" WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID;

    	END;
    	SET LI_LOCK_ACQUIRED = RELEASE_LOCK('coi_sfi_projects_lock');
    	SELECT '1';
    	ELSE
            SELECT 'Unable to acquire lock. Another process may sync the projects vs entity.';

    	END IF;
END
//
