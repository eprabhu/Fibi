DELIMITER $$
CREATE PROCEDURE `RULE_EVALUATE_WORKFLOW`(
AV_MODULE_CODE           DECIMAL(38,0),
AV_SUBMODULE_CODE        DECIMAL(38,0),
AV_MODULE_ITEM_KEY       VARCHAR(200),
AV_LOGGIN_PERSON_ID      VARCHAR(200),
AV_UPDATE_USER           VARCHAR(200),
AV_SUB_MODULE_ITEM_KEY    VARCHAR(20)
)
    DETERMINISTIC
BEGIN
DECLARE LS_RESULT VARCHAR(10);
DECLARE LI_WORKFLOW_RESULT DECIMAL(38,0);
DECLARE LS_ERR VARCHAR(600);
DECLARE	LI_WORKFLOW_ID    DECIMAL(38,0);
DECLARE LS_AWARD_ID INT;

DECLARE LI_WORKFLOW_SEQUENCE  INT;
DECLARE	LI_WRKFLW_COUNT		INT;
DECLARE	LI_MAX_WRKFLW_SEQUENCE      INT;
DECLARE LS_WORKFLOW_LOG_ID  INT;


DECLARE LS_RULE_ID INT(6);
DECLARE LS_RULE_EXPRESSION VARCHAR(300);
DECLARE LS_MAP_ID INT(6);
DECLARE LS_MAP_NUMBER INT(3);
DECLARE LS_WORKFLOW_FLAG INT(3);
DECLARE AD_PERSON_ID   VARCHAR(20);
DECLARE  LS_USER_MESSAGE              VARCHAR(4000);
DECLARE  LS_TITLE                     VARCHAR(1000);
DECLARE LS_MSG_TYPE			VARCHAR(20);
DECLARE LS_AWARD_NUMBER VARCHAR(20);
DECLARE LS_MODULE_ITEM_KEY VARCHAR(20);
DECLARE LS_REPORT_CLASS_NAME VARCHAR(200);
DECLARE LS_AGREEMENT_TYPE VARCHAR(200);

DECLARE LI_NEXT_VAL INT(20);
DECLARE LS_LEAD_UNIT_NUMBER VARCHAR(20);
DECLARE LS_PARENT_UNIT_NUMBER VARCHAR(20);

DECLARE LS_COUNT INT;
DECLARE LI_COUNT INT(12);

DECLARE DONE1 INT DEFAULT FALSE;

DECLARE LI_MIN_MAP_NUMBER INT;
DECLARE LL_MIN_STOP_NUMBER INT;

DECLARE LS_CODE CHAR(5) DEFAULT '00000';
DECLARE LS_MSG TEXT;
DECLARE LS_DOCUMENT_TYPE_CODE VARCHAR(3);
DECLARE LS_SERVICE_REQUEST_TYPE VARCHAR(200);
DECLARE LI_AWD_MODIFI_FLAG INT;
DECLARE LI_VARIATION_FLAG INT;
DECLARE LS_AWARD_TITLE VARCHAR(300);
DECLARE LS_CLAIM_NUMBER VARCHAR(20);
DECLARE LS_PROGRESS_REPORT_NUMBER VARCHAR(20);							

DECLARE LI_NEXT_NODE INT;	
DECLARE LI_NODE INT;	
DECLARE LI_NODE_IF_TRUE INT;	
DECLARE LI_NODE_IF_FALSE INT;	
DECLARE LOOP_CNT INT;
DECLARE LS_RULE_STR VARCHAR(6000);
DECLARE LS_RULE_STR_TMP VARCHAR(6000);
DECLARE LS_REPORT_TITLE VARCHAR(300);

DECLARE WORKFLOW_CURSOR CURSOR FOR 
	SELECT T2.NODE_NUMBER,CASE WHEN IFNULL(T2.NEXT_NODE,'') = '' THEN -1 ELSE T2.NEXT_NODE END,
		   CASE WHEN IFNULL(T2.NODE_IF_TRUE,'') = '' THEN -1 ELSE T2.NODE_IF_TRUE END,
		   CASE WHEN IFNULL(T2.NODE_IF_FALSE,'') = '' THEN -1 ELSE T2.NODE_IF_FALSE END,
		   T3.RULE_ID,T3.RULE_EXPRESSION,T3.MAP_ID 		 	 
	  FROM META_RULES T1,
           META_RULE_DETAIL T2,
		   BUSINESS_RULES T3
	 WHERE T1.MODULE_CODE = AV_MODULE_CODE 
       AND T1.SUB_MODULE_CODE = AV_SUBMODULE_CODE
       AND T1.META_RULE_TYPE = 'R'  
	   AND T1.UNIT_NUMBER = LS_PARENT_UNIT_NUMBER
	   AND T2.META_RULE_ID = T1.META_RULE_ID 
	   AND ( (T2.PARENT_NODE = 0 AND LOOP_CNT = 0) OR ( FIND_IN_SET(T2.NODE_NUMBER, LS_RULE_STR)  > 0
														)
			)   
		AND T3.RULE_ID = T2.RULE_ID;

DECLARE ADD_TO_INBOX_CUR CURSOR FOR 
SELECT APPROVER_PERSON_ID 
FROM WORKFLOW_DETAIL 
WHERE WORKFLOW_ID = LI_WORKFLOW_ID AND APPROVAL_STATUS = 'W';

DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;


SET LS_MAP_NUMBER = 0;
SET LI_WORKFLOW_SEQUENCE= 1;
SET LI_MAX_WRKFLW_SEQUENCE = 1;
SET LS_WORKFLOW_FLAG = 0;


BEGIN
if AV_MODULE_CODE = 1 then
 
 	 SELECT LEAD_UNIT_NUMBER INTO LS_LEAD_UNIT_NUMBER 
	 FROM AWARD WHERE AWARD_ID = AV_MODULE_ITEM_KEY;
 
elseif AV_MODULE_CODE = 3 then
 
	 SELECT HOME_UNIT_NUMBER INTO LS_LEAD_UNIT_NUMBER 
	 FROM EPS_PROPOSAL WHERE PROPOSAL_ID = AV_MODULE_ITEM_KEY;
	 
elseif AV_MODULE_CODE = 13 then   
	
	SELECT UNIT_NUMBER INTO LS_LEAD_UNIT_NUMBER 	
    FROM agreement_header WHERE AGREEMENT_REQUEST_ID = AV_MODULE_ITEM_KEY;

elseif AV_MODULE_CODE = 14 then   
	
	SELECT LEAD_UNIT_NUMBER INTO LS_LEAD_UNIT_NUMBER 	
     FROM AWARD WHERE AWARD_ID IN(SELECT AWARD_ID 	
										FROM CLAIM 	
										WHERE CLAIM_ID = AV_MODULE_ITEM_KEY);
elseif AV_MODULE_CODE = 16 then   
	
	SELECT LEAD_UNIT_NUMBER INTO LS_LEAD_UNIT_NUMBER 	
     FROM AWARD WHERE AWARD_ID IN(SELECT AWARD_ID 	
										FROM AWARD_PROGRESS_REPORT 	
										WHERE PROGRESS_REPORT_ID = AV_MODULE_ITEM_KEY);	
elseif AV_MODULE_CODE = 20 then
 
	 SELECT UNIT_NUMBER INTO LS_LEAD_UNIT_NUMBER 
	 FROM SR_HEADER WHERE SR_HEADER_ID = AV_MODULE_ITEM_KEY;										

end if;


SET LS_PARENT_UNIT_NUMBER = LS_LEAD_UNIT_NUMBER ;

SELECT COUNT(1) INTO LI_WRKFLW_COUNT
FROM WORKFLOW
WHERE MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
AND MODULE_CODE = AV_MODULE_CODE
AND IFNULL(SUB_MODULE_CODE,0) = IFNULL(AV_SUBMODULE_CODE,0)
AND IFNULL(SUB_MODULE_ITEM_ID,0) = IFNULL(AV_SUB_MODULE_ITEM_KEY,0);



IF LI_WRKFLW_COUNT > 0 THEN

  SELECT MAX(WORKFLOW_SEQUENCE) INTO LI_MAX_WRKFLW_SEQUENCE
  FROM WORKFLOW
  WHERE MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
  AND MODULE_CODE = AV_MODULE_CODE
  AND IFNULL(SUB_MODULE_CODE,0) = IFNULL(AV_SUBMODULE_CODE,0)
  AND IFNULL(SUB_MODULE_ITEM_ID,0) = IFNULL(AV_SUB_MODULE_ITEM_KEY,0);
  
  
  UPDATE WORKFLOW 
  SET IS_WORKFLOW_ACTIVE = 'N'
  WHERE MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
  AND MODULE_CODE = AV_MODULE_CODE
  AND WORKFLOW_SEQUENCE = LI_MAX_WRKFLW_SEQUENCE
  AND IFNULL(SUB_MODULE_CODE,0) = IFNULL(AV_SUBMODULE_CODE,0)
  AND IFNULL(SUB_MODULE_ITEM_ID,0) = IFNULL(AV_SUB_MODULE_ITEM_KEY,0);

  SET LI_WORKFLOW_SEQUENCE = LI_MAX_WRKFLW_SEQUENCE + 1;
  
END IF;

	INSERT INTO WORKFLOW(
	MODULE_CODE,
	MODULE_ITEM_ID,					
	WORKFLOW_SEQUENCE,
	IS_WORKFLOW_ACTIVE,
	WORKFLOW_START_DATE,
	WORKFLOW_END_DATE,
	WORKFLOW_START_PERSON,
	WORKFLOW_END_PERSON,
	COMMENTS,
	SUB_MODULE_CODE,
	SUB_MODULE_ITEM_ID
  )
  VALUES(
	AV_MODULE_CODE,
	AV_MODULE_ITEM_KEY,					
	LI_WORKFLOW_SEQUENCE,
	'Y',
	utc_timestamp(),
	NULL,
	AV_LOGGIN_PERSON_ID,
	NULL,
	NULL,
	AV_SUBMODULE_CODE,
	AV_SUB_MODULE_ITEM_KEY
  );

	SELECT LAST_INSERT_ID() INTO LI_WORKFLOW_ID;
END;

WHILE LS_PARENT_UNIT_NUMBER IS NOT NULL  DO
 
	SET LOOP_CNT = 0;
	CURSOR_LOOP : LOOP
	SET DONE1 = FALSE;
	SET LI_NEXT_NODE = -1;
	SET LI_NODE_IF_TRUE = -1;
	SET LI_NODE_IF_FALSE = -1;

	OPEN WORKFLOW_CURSOR;

				WORKFLOW_CURSOR_LOOP : LOOP
				
	
						FETCH WORKFLOW_CURSOR INTO LI_NODE,LI_NEXT_NODE,LI_NODE_IF_TRUE,LI_NODE_IF_FALSE,LS_RULE_ID,LS_RULE_EXPRESSION,LS_MAP_ID;
						IF DONE1 THEN
							LEAVE WORKFLOW_CURSOR_LOOP;
						END IF;                         

                         SET LS_RULE_STR = '-1';
						 SET LS_RULE_STR_TMP = '-1';
						   
                         IF LI_NEXT_NODE <> -1 THEN
							 SET LS_RULE_STR_TMP = CONCAT(LS_RULE_STR_TMP, ',', LI_NEXT_NODE);
                         END IF;
						CALL RULE_EVALUATE_EXPRESSION(AV_MODULE_CODE,
										  AV_SUBMODULE_CODE,
										  AV_MODULE_ITEM_KEY,
										  LS_RULE_ID,
										  LS_RULE_EXPRESSION,
										  AV_UPDATE_USER,
										  AV_LOGGIN_PERSON_ID,
										  AV_SUB_MODULE_ITEM_KEY,
										  @EXPR_RESULT
										  );	
						SET LS_RESULT = @EXPR_RESULT;
						IF LS_RESULT = 'TRUE' THEN
						  SET LS_MAP_NUMBER = LS_MAP_NUMBER + 1 ;
						  SET  LI_WORKFLOW_RESULT = FN_RULE_BUILD_WORKFLOW (AV_MODULE_ITEM_KEY,
																		  AV_MODULE_CODE,
																		  AV_SUBMODULE_CODE,
																		  AV_LOGGIN_PERSON_ID,
																		  AV_UPDATE_USER,
																		  LS_MAP_ID,
																		  LS_MAP_NUMBER,
																		  LI_WORKFLOW_ID,
																		  AV_SUB_MODULE_ITEM_KEY,
                                                                          LS_RULE_ID
																		  );

						  UPDATE WORKFLOW SET MAP_TYPE = 'R' WHERE WORKFLOW_ID  = LI_WORKFLOW_ID ;
						  SET LS_WORKFLOW_FLAG = 1;
						END IF; 
                        IF LI_NODE_IF_TRUE <> -1 AND LS_RESULT = 'TRUE' THEN
							 SET LS_RULE_STR_TMP = CONCAT(LS_RULE_STR_TMP, ',', LI_NODE_IF_TRUE);
                        END IF;
                        IF LI_NODE_IF_FALSE <> -1 AND LS_RESULT = 'FALSE'THEN
							 SET LS_RULE_STR_TMP = CONCAT(LS_RULE_STR_TMP, ',', LI_NODE_IF_FALSE);
                        END IF;                        

 						SET LS_RULE_STR = CONCAT(LS_RULE_STR_TMP, ',',
												LS_RULE_STR);
                                                

					END LOOP;
				 CLOSE WORKFLOW_CURSOR;
				 
			SET LOOP_CNT = LOOP_CNT + 1;
			
		 IF LI_NEXT_NODE = -1 AND LI_NODE_IF_TRUE = -1 AND LI_NODE_IF_FALSE = -1 THEN
	        LEAVE CURSOR_LOOP;
		 END IF;
	END LOOP;			 



				  
SET DONE1 = FALSE;
SELECT count(PARENT_UNIT_NUMBER) into LS_COUNT  FROM UNIT WHERE UNIT_NUMBER = LS_PARENT_UNIT_NUMBER;
IF LS_COUNT = 0 THEN
    SET LS_PARENT_UNIT_NUMBER = NULL;
ELSE
	SELECT PARENT_UNIT_NUMBER INTO LS_PARENT_UNIT_NUMBER FROM UNIT WHERE UNIT_NUMBER = LS_PARENT_UNIT_NUMBER;
END IF;

END WHILE;

IF LS_WORKFLOW_FLAG <> 0 THEN

		SELECT MIN(MAP_NUMBER) INTO LI_MIN_MAP_NUMBER  FROM WORKFLOW_DETAIL WHERE WORKFLOW_ID = LI_WORKFLOW_ID;
		SELECT MIN(APPROVAL_STOP_NUMBER) INTO LL_MIN_STOP_NUMBER FROM WORKFLOW_DETAIL WHERE WORKFLOW_ID = LI_WORKFLOW_ID AND MAP_NUMBER = LI_MIN_MAP_NUMBER;

		UPDATE WORKFLOW_DETAIL SET APPROVAL_STATUS = 'W' 
		WHERE WORKFLOW_ID = LI_WORKFLOW_ID 
		AND MAP_NUMBER = LI_MIN_MAP_NUMBER
		AND APPROVAL_STOP_NUMBER = LL_MIN_STOP_NUMBER
		AND APPROVAL_STATUS  = 'T';
		
		
		SET LI_COUNT =  FN_WORKFLOW_HANDLE_DELEGATIONS(LI_WORKFLOW_ID,
									LI_MIN_MAP_NUMBER,
									LL_MIN_STOP_NUMBER,
									'W',
									AV_LOGGIN_PERSON_ID,
									AV_UPDATE_USER);		

		
		IF AV_MODULE_CODE = 1 THEN 
				SELECT TITLE,AWARD_NUMBER,AWARD_DOCUMENT_TYPE_CODE INTO LS_TITLE,LS_AWARD_NUMBER,LS_DOCUMENT_TYPE_CODE
                FROM AWARD WHERE AWARD_ID = AV_MODULE_ITEM_KEY;
				
				IF AV_SUBMODULE_CODE = 2 THEN 
				
					SELECT T2.DESCRIPTION INTO LS_TITLE
					FROM TASK T1 LEFT JOIN TASK_TYPE T2 ON T1.TASK_TYPE_CODE = T2.TASK_TYPE_CODE 
					WHERE T1.TASK_ID = AV_SUB_MODULE_ITEM_KEY ;
				
					SET LS_MSG_TYPE := '114';
					
					SELECT TITLE INTO LS_AWARD_TITLE
					FROM AWARD WHERE AWARD_ID = AV_MODULE_ITEM_KEY;
				
				ELSE
					IF LS_DOCUMENT_TYPE_CODE = '3' THEN
					SET LS_MSG_TYPE := '122';
                    ELSE 
                    SET LS_MSG_TYPE := '101';
					END IF;
				END IF;
		ELSEIF AV_MODULE_CODE = 3 THEN 
				SELECT TITLE INTO LS_TITLE FROM EPS_PROPOSAL WHERE PROPOSAL_ID = AV_MODULE_ITEM_KEY;
				SET LS_MSG_TYPE := '102';
		ELSEIF AV_MODULE_CODE = 5 THEN 
				SELECT COALESCE(T2.TITLE,T3.TITLE,'Negotiation') INTO LS_TITLE FROM  NEGOTIATION_ASSOCIATION T1 
				LEFT JOIN AWARD T2 ON T1.ASSOCIATED_PROJECT_ID = T2.AWARD_NUMBER AND T1.ASSOCIATION_TYPE_CODE = 1 AND T2.IS_LATEST = 'Y'
				LEFT JOIN PROPOSAL T3 ON T3.PROPOSAL_NUMBER = T1.ASSOCIATED_PROJECT_ID AND T1.ASSOCIATION_TYPE_CODE = 2
				WHERE T1.NEGOTIATION_ID = AV_MODULE_ITEM_KEY ;
				SET LS_TITLE = COALESCE(LS_TITLE,'Negotiation');
				SET LS_MSG_TYPE := '104';

		ELSEIF AV_MODULE_CODE = 13 THEN
		SELECT TITLE INTO LS_TITLE FROM AGREEMENT_HEADER WHERE AGREEMENT_REQUEST_ID = AV_MODULE_ITEM_KEY;
		SET LS_MSG_TYPE := '1308';

		ELSEIF AV_MODULE_CODE = 14 THEN	
				SELECT TITLE INTO LS_TITLE FROM CLAIM WHERE CLAIM_ID = AV_MODULE_ITEM_KEY;	
				SET LS_MSG_TYPE := '123';
		ELSEIF AV_MODULE_CODE = 16 THEN	
				SELECT TITLE INTO LS_TITLE FROM AWARD WHERE AWARD_ID IN(SELECT AWARD_ID 
										FROM AWARD_PROGRESS_REPORT 
										WHERE PROGRESS_REPORT_ID = AV_MODULE_ITEM_KEY); 				
				SET LS_MSG_TYPE := '126';
		ELSEIF AV_MODULE_CODE = 20 THEN	
				SELECT SUBJECT INTO LS_TITLE FROM SR_HEADER WHERE SR_HEADER_ID = AV_MODULE_ITEM_KEY;	
				SET LS_MSG_TYPE := '135';
			  
		END IF;
        
		IF AV_MODULE_CODE = 1 THEN 

			SET  LS_MODULE_ITEM_KEY = LS_AWARD_NUMBER;
			
			IF AV_SUBMODULE_CODE = 2 THEN 
			
				SET  LS_MODULE_ITEM_KEY = AV_SUB_MODULE_ITEM_KEY;
			
			END IF;
		ELSE
		
			SET  LS_MODULE_ITEM_KEY = AV_MODULE_ITEM_KEY;
	
		END IF;
		
		IF AV_MODULE_CODE = 14 THEN 
        
			SELECT CLAIM_NUMBER INTO LS_CLAIM_NUMBER FROM CLAIM WHERE CLAIM_ID = AV_MODULE_ITEM_KEY;
			SET  LS_MODULE_ITEM_KEY = LS_CLAIM_NUMBER;  
        END IF;
		
		IF AV_MODULE_CODE = 16 THEN 
        
			SELECT PROGRESS_REPORT_NUMBER INTO LS_PROGRESS_REPORT_NUMBER FROM AWARD_PROGRESS_REPORT WHERE PROGRESS_REPORT_ID = AV_MODULE_ITEM_KEY;
			SET  LS_MODULE_ITEM_KEY = LS_PROGRESS_REPORT_NUMBER;          
        END IF;								   
		
	
	
	SELECT COUNT(1) INTO LI_VARIATION_FLAG FROM AWARD
	WHERE AWARD_ID = AV_MODULE_ITEM_KEY
	AND AWARD_DOCUMENT_TYPE_CODE = 3;
	
	SELECT COUNT(1) INTO LI_AWD_MODIFI_FLAG FROM AWARD
	WHERE AWARD_ID = AV_MODULE_ITEM_KEY
	AND AWARD_DOCUMENT_TYPE_CODE = 2;
	
	SELECT T2.DESCRIPTION INTO LS_SERVICE_REQUEST_TYPE FROM AWARD T1
	INNER JOIN SR_TYPE T2 ON T1.AWARD_VARIATION_TYPE_CODE = T2.TYPE_CODE
	WHERE AWARD_ID = AV_MODULE_ITEM_KEY;
	
	
	
		
		
	IF AV_MODULE_CODE = 1 AND AV_SUBMODULE_CODE = 0 AND LI_VARIATION_FLAG > 0 THEN 
	
		
		SET LS_USER_MESSAGE = CONCAT(LS_SERVICE_REQUEST_TYPE,' for #',LS_AWARD_NUMBER,' : ',LS_TITLE);
			
	ELSEIF AV_MODULE_CODE = 1 AND AV_SUBMODULE_CODE = 0 AND LI_AWD_MODIFI_FLAG > 0 THEN 
	
		
	  SET LS_USER_MESSAGE = CONCAT('Admin Correction for ',LS_AWARD_NUMBER,' : ',LS_TITLE);

	ELSEIF AV_MODULE_CODE = 1 AND AV_SUBMODULE_CODE = 2 THEN 
	
		IF LI_VARIATION_FLAG > 0 THEN
		
			  SET LS_USER_MESSAGE = CONCAT(LS_SERVICE_REQUEST_TYPE,' ',LS_TITLE,' for #',LS_AWARD_NUMBER,' : ',LS_AWARD_TITLE);


		ELSEIF LI_AWD_MODIFI_FLAG > 0 THEN
		
				SET LS_USER_MESSAGE = CONCAT('Admin Correction ',LS_TITLE,' for #',LS_AWARD_NUMBER,' : ',LS_AWARD_TITLE);

		
		ELSE
			
			SET LS_USER_MESSAGE = CONCAT(LS_TITLE,' for #',LS_AWARD_NUMBER,' : ',LS_AWARD_TITLE);

		END IF;
		
		ELSEIF AV_MODULE_CODE = 13 THEN

			SELECT T2.DESCRIPTION INTO LS_AGREEMENT_TYPE FROM  AGREEMENT_HEADER T1
			INNER JOIN AGREEMENT_TYPE T2  ON T2.AGREEMENT_TYPE_CODE = T1.AGREEMENT_TYPE_CODE
			WHERE AGREEMENT_REQUEST_ID = AV_MODULE_ITEM_KEY;
			
			SET LS_USER_MESSAGE = CONCAT('#',LS_MODULE_ITEM_KEY,' : ',LS_TITLE,' - ', LS_AGREEMENT_TYPE);

	ELSEIF AV_MODULE_CODE = 16 THEN 
    		select T1.TITLE,T2.DESCRIPTION into LS_REPORT_TITLE,LS_REPORT_CLASS_NAME from award_progress_report T1 LEFT JOIN REPORT_CLASS T2 
			ON T1.REPORT_CLASS_CODE = T2.REPORT_CLASS_CODE where T1.PROGRESS_REPORT_ID =  AV_MODULE_ITEM_KEY;
			SET LS_USER_MESSAGE = CONCAT(LS_REPORT_CLASS_NAME,' #',LS_PROGRESS_REPORT_NUMBER," : ",LS_REPORT_TITLE);
	ELSE 
		SET LS_USER_MESSAGE = CONCAT('#',LS_MODULE_ITEM_KEY,' : ',LS_TITLE);
	END IF;
	
	
		
    SET DONE1 = FALSE; 
    OPEN ADD_TO_INBOX_CUR;

	ADD_TO_INBOX_LOOP : LOOP
    
        FETCH ADD_TO_INBOX_CUR INTO AD_PERSON_ID;
		IF DONE1 THEN
			LEAVE ADD_TO_INBOX_LOOP;
		END IF;
        
        
		CALL ADD_TO_INBOX(AV_MODULE_CODE,AV_MODULE_ITEM_KEY,AD_PERSON_ID,'R',LS_USER_MESSAGE,AV_UPDATE_USER,LS_MSG_TYPE,AV_SUBMODULE_CODE,AV_SUB_MODULE_ITEM_KEY);

	END LOOP;
  CLOSE ADD_TO_INBOX_CUR;

END IF;


IF LS_CODE <> '00000' THEN
		SELECT 0;
ELSE
		SELECT 1;
END IF;


END$$

