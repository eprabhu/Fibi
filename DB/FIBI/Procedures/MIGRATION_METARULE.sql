DELIMITER $$
CREATE PROCEDURE `MIGRATION_METARULE`()
BEGIN
DECLARE LI_SEQ_ERROR_LOG_ID 				INT;
DECLARE LS_ERROR_MSG 						VARCHAR(1000);
DECLARE LI_ERR_FLAG 						INT;
DECLARE LI_FLAG								INT;
DECLARE LI_UPDATE_USER 						VARCHAR(60);
DECLARE LI_RULE_ID 							INT(6);
DECLARE LI_RULE_TYPE 						VARCHAR(2);
DECLARE LI_UNIT_NUMBER 						VARCHAR(8);
DECLARE LI_MODULE_CODE 						INT(3);
DECLARE LI_SUB_MODULE_CODE 					INT(3);
DECLARE LI_META_RULE_ID						INT(6);
DECLARE LI_NODE_NUMBER						INT(4);
DECLARE LI_PARENT_NODE						INT(4);
SET LI_UPDATE_USER = 'quickstart';
	BEGIN 
		DECLARE DONE1 INT DEFAULT FALSE;
		DECLARE MIGRATION_META_RULE_CURSOR CURSOR FOR  
			SELECT T1.RULE_ID,T1.RULE_TYPE,T1.UNIT_NUMBER,T1.MODULE_CODE,T1.SUB_MODULE_CODE FROM BUSINESS_RULES T1 
            WHERE T1.RULE_TYPE='R'AND T1.IS_ACTIVE='Y' ORDER BY RULE_EVALUATION_ORDER;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
			 @errno = MYSQL_ERRNO, @msg = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @msg);
			SELECT @full_error INTO LS_ERROR_MSG;
			SELECT IFNULL(MAX(MIGRATION_ERROR_LOG_ID),0)+1 INTO LI_SEQ_ERROR_LOG_ID FROM MIGRATION_ERROR_LOG;
			INSERT INTO MIGRATION_ERROR_LOG(MIGRATION_ERROR_LOG_ID, LEGACY_PROJECT_ID,ERROR_TYPE, FILE_NAME, ERROR_MESSAGE, VALIDATION_TYPE, UPDATE_TIMESTAMP, UPDATE_USER)
			VALUES(LI_SEQ_ERROR_LOG_ID,NULL,'EXCEPTION','META_RULE',LS_ERROR_MSG,'CREATION',NOW(),'quickstart');
		END;
		OPEN MIGRATION_META_RULE_CURSOR;
		MIGRATION_META_RULE_CURSOR_LOOP : LOOP
				FETCH MIGRATION_META_RULE_CURSOR INTO 	LI_RULE_ID,
														LI_RULE_TYPE,
														LI_UNIT_NUMBER,
														LI_MODULE_CODE,
														LI_SUB_MODULE_CODE;
				IF DONE1 THEN
					LEAVE MIGRATION_META_RULE_CURSOR_LOOP;
				END IF;
				SELECT COUNT(1) INTO LI_FLAG FROM META_RULES 
				WHERE MODULE_CODE = LI_MODULE_CODE 
				AND SUB_MODULE_CODE = LI_SUB_MODULE_CODE
				AND UNIT_NUMBER = LI_UNIT_NUMBER;
				IF LI_FLAG = 0 THEN
					INSERT INTO META_RULES( 
											UNIT_NUMBER,
											META_RULE_TYPE,
											MODULE_CODE,
											SUB_MODULE_CODE,
											UPDATE_TIMESTAMP,
											UPDATE_USER
										  ) VALUES(
											LI_UNIT_NUMBER,
											LI_RULE_TYPE,
											LI_MODULE_CODE,
											LI_SUB_MODULE_CODE,
											UTC_TIMESTAMP(),
											LI_UPDATE_USER
										  );
				END IF;
				SELECT META_RULE_ID INTO LI_META_RULE_ID FROM META_RULES 
				WHERE MODULE_CODE = LI_MODULE_CODE 
				AND SUB_MODULE_CODE = LI_SUB_MODULE_CODE
				AND UNIT_NUMBER = LI_UNIT_NUMBER;
				SELECT IFNULL(MAX(NODE_NUMBER),0)+1 INTO LI_NODE_NUMBER FROM META_RULE_DETAIL 
				WHERE META_RULE_ID = LI_META_RULE_ID;
				SELECT IFNULL(MAX(PARENT_NODE),-1)+1 INTO LI_PARENT_NODE FROM META_RULE_DETAIL 
				WHERE META_RULE_ID = LI_META_RULE_ID; 
				INSERT INTO META_RULE_DETAIL(
											META_RULE_ID,
											NODE_NUMBER,
											RULE_ID,
											PARENT_NODE,
											NEXT_NODE,
											NODE_IF_TRUE,
											NODE_IF_FALSE,
											UPDATE_TIMESTAMP,
											UPDATE_USER
											) VALUES (
											LI_META_RULE_ID,
											LI_NODE_NUMBER,
											LI_RULE_ID,
											LI_PARENT_NODE,
											LI_NODE_NUMBER +1,
											NULL,
											NULL,
											UTC_TIMESTAMP(),
											LI_UPDATE_USER
											);
			END LOOP;
		CLOSE MIGRATION_META_RULE_CURSOR;				
	END;
END$$
