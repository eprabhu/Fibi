DELIMITER //
CREATE FUNCTION `FN_RULE_BUILD_EVALUATION_PANEL`(
AV_MODULE_ITEM_KEY  	VARCHAR(20),
AV_MODULE_CODE   		INT,
AV_LOGPERSON_ID  		VARCHAR(40),
AV_UPDATE_USER  		VARCHAR(40),
AV_ACTION_TYPE   		VARCHAR(20),
AV_SUBMODULE_CODE         INT(3),
AV_SUB_MODULE_ITEM_KEY    VARCHAR(20)
) RETURNS int
    DETERMINISTIC
BEGIN
DECLARE LI_MAP_ID INT;
DECLARE LI_PROPOSAL_EVALUATION_ID INT;
DECLARE LI_APPROVER_NUMBER INT;
DECLARE LS_APPROVER_PERSON_ID VARCHAR(60);
DECLARE LS_APPROVER_PERSON_NAME VARCHAR(100);
DECLARE LS_UPDATE_USER VARCHAR(60);
DECLARE LO_UPDATE_TIMESTAMP DATETIME;
DECLARE LI_WRKFLW_COUNT INT;
DECLARE LI_MAX_WRKFLW_SEQUENCE INT;
DECLARE LI_WORKFLOW_ID INT;
DECLARE LS_SEQ_WORKFLOW_DETAIL_ID INT;
DECLARE LS_EMAIL_ADDRESS VARCHAR(500);
DECLARE LI_WORKFLOW_SEQUENCE INT;
DECLARE LW_WORKFLOW_DETAIL_ID INT;
DECLARE LI_SCORING_CRITERIA_TYPE_CODE INT;
DECLARE LI_SCORE DECIMAL(3,1);
DECLARE LS_WORKFLOW_REVIEWER_SCORE_ID INT;
DECLARE LI_APPROVAL_STOP_NUMBER INT;
DECLARE LS_PRIMARY_APPROVER_FLAG VARCHAR(1);
DECLARE LS_APPROVAL_STATUS VARCHAR(1);
DECLARE LD_UPDATE_TIMESTAMP VARCHAR(20);
DECLARE LI_ROLE_TYPE_CODE INT;
DECLARE  LI_MAP_NUMBER INT;
DECLARE LS_CODE CHAR(5) DEFAULT '00000';
DECLARE LS_MSG TEXT;
DECLARE LS_WORKFLOW_ID_OLD INT;
DECLARE LS_COUNT INT;
DECLARE CUR_MAP_ID INT;
DECLARE MAX_MAP_NUMBER INT;
DECLARE  LS_USER_MESSAGE   VARCHAR(4000);
DECLARE  LS_TITLE     VARCHAR(1000);
DECLARE  LS_MSG_TYPE	VARCHAR(20);
DECLARE LS_APPROVAL_COMMENT	VARCHAR(1000);
DECLARE LS_APPROVAL_DATE	DATETIME;
DECLARE LI_WORKFLOW_REVIEWER_SCORE_ID INT(12);
DECLARE LI_WORKFLOW_REVIEWER_COMMENTS_ID INT(12);
DECLARE LI_OLD_WORKFLOW_COMMENTS_ID INT(12);
DECLARE LS_IS_PUBLIC	VARCHAR(1);
DECLARE LS_COMMENT	    LONGTEXT;
DECLARE LI_WORKFLOW_ATTMNTS_ID INT(12);
DECLARE LI_WORKFLOW_REVIEWER_ATTMNTS_ID INT(12);
DECLARE LI_WORKFLOW_COMMENTS_ID INT(12);
DECLARE LS_FILE_NAME VARCHAR(300);
DECLARE LS_MIME_TYPE VARCHAR(200);
DECLARE LS_FILE_DATA_ID VARCHAR(36);
DECLARE LB_DATA LONGBLOB;
DECLARE LS_ATT_UPDATE_USER VARCHAR(60);
DECLARE LD_ATT_UPDATE_TIMESTAMP VARCHAR(20);
declare LS_ERROR varchar(3000);
DECLARE LS_STOP_NAME VARCHAR(200);
DECLARE LS_MAP_NAME VARCHAR(200);
DECLARE LS_MAP_DESCRIPTION VARCHAR(200);
DECLARE LI_SOURCE_WORKFLOW_DETAIL_ID INT;
DECLARE LI_TARGET_WORKFLOW_DETAIL_ID INT;

        

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
@errno = MYSQL_ERRNO, @msg = MESSAGE_TEXT;
SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @msg);
SELECT @full_error INTO LS_ERROR;

SET SQL_SAFE_UPDATES = 0;
UPDATE INBOX_ID_GENERATOR SET NEXT_VAL =    (SELECT (CASE WHEN MAX(INBOX_ID) IS NULL THEN 1
ELSE MAX(INBOX_ID)+1 END)
FROM INBOX);
UPDATE WORKFLOW_REVIEWER_SCORE_ID_GENERATOR SET NEXT_VAL =    (SELECT (CASE WHEN MAX(WORKFLOW_REVIEWER_SCORE_ID) IS NULL THEN 1
ELSE MAX(WORKFLOW_REVIEWER_SCORE_ID)+1 END)
FROM WORKFLOW_REVIEWER_SCORE);
UPDATE WORKFLOW_REVIEWER_COMMENTS_ID_GENERATOR SET NEXT_VAL =    (SELECT (CASE WHEN MAX(WORKFLOW_REVIEWER_COMMENTS_ID) IS NULL THEN 1
ELSE MAX(WORKFLOW_REVIEWER_COMMENTS_ID)+1 END)
FROM WORKFLOW_REVIEWER_COMMENTS);
UPDATE WORKFLOW_REVIEWER_ATTMNTS_ID_GENERATOR SET NEXT_VAL =    (SELECT (CASE WHEN MAX(WORKFLOW_REVIEWER_ATTMNTS_ID) IS NULL THEN 1
ELSE MAX(WORKFLOW_REVIEWER_ATTMNTS_ID)+1 END)
FROM WORKFLOW_REVIEWER_ATTMNTS);
RETURN 0;
END;
SET LI_WORKFLOW_SEQUENCE= 1;
IF AV_MODULE_CODE = 3 THEN
SELECT TITLE INTO LS_TITLE FROM EPS_PROPOSAL WHERE PROPOSAL_ID = AV_MODULE_ITEM_KEY;
SET LS_MSG_TYPE := '125';
SET LS_USER_MESSAGE = CONCAT('#',AV_MODULE_ITEM_KEY,' - ',LS_TITLE);
END IF;
SELECT COUNT(1) INTO LI_WRKFLW_COUNT
FROM WORKFLOW
WHERE MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
AND MODULE_CODE = AV_MODULE_CODE
AND SUB_MODULE_CODE = AV_SUBMODULE_CODE
AND SUB_MODULE_ITEM_ID = AV_SUB_MODULE_ITEM_KEY;
IF LI_WRKFLW_COUNT > 0 THEN
SELECT MAX(WORKFLOW_SEQUENCE) INTO LI_MAX_WRKFLW_SEQUENCE
FROM WORKFLOW
WHERE MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
AND MODULE_CODE = AV_MODULE_CODE
AND SUB_MODULE_CODE = AV_SUBMODULE_CODE
AND SUB_MODULE_ITEM_ID = AV_SUB_MODULE_ITEM_KEY;
SELECT WORKFLOW_ID INTO LS_WORKFLOW_ID_OLD
FROM WORKFLOW
WHERE MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
AND MODULE_CODE = AV_MODULE_CODE
AND SUB_MODULE_CODE = AV_SUBMODULE_CODE
AND SUB_MODULE_ITEM_ID = AV_SUB_MODULE_ITEM_KEY
AND IS_WORKFLOW_ACTIVE = 'Y';
SET SQL_SAFE_UPDATES = 0;
UPDATE WORKFLOW
SET IS_WORKFLOW_ACTIVE = 'N'
WHERE MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
AND WORKFLOW_SEQUENCE = LI_MAX_WRKFLW_SEQUENCE;
SET LI_WORKFLOW_SEQUENCE = LI_MAX_WRKFLW_SEQUENCE + 1;
END IF;
INSERT INTO WORKFLOW(
MODULE_CODE,
MODULE_ITEM_ID,
WORKFLOW_SEQUENCE,
IS_WORKFLOW_ACTIVE,
WORKFLOW_START_DATE,
WORKFLOW_END_DATE,
WORKFLOW_START_PERSON,
WORKFLOW_END_PERSON,
COMMENTS,
MAP_TYPE,
SUB_MODULE_CODE,
SUB_MODULE_ITEM_ID
)
VALUES(
AV_MODULE_CODE,
AV_MODULE_ITEM_KEY,
LI_WORKFLOW_SEQUENCE,
'Y',
utc_timestamp(),
NULL,
AV_LOGPERSON_ID,
NULL,
NULL,
'E',
AV_SUBMODULE_CODE,
AV_SUB_MODULE_ITEM_KEY
);
SELECT LAST_INSERT_ID() INTO LI_WORKFLOW_ID;
BEGIN
DECLARE DONE2 INT DEFAULT FALSE;
DECLARE CUR_ADMINCHK_DATA CURSOR FOR
SELECT WD.MAP_ID,
WD.MAP_NUMBER,
WD.APPROVAL_STOP_NUMBER,
WD.APPROVER_NUMBER,
WD.PRIMARY_APPROVER_FLAG,
WD.APPROVER_PERSON_ID,
WD.APPROVAL_STATUS,
WD.UPDATE_USER,
WD.UPDATE_TIMESTAMP,
WD.ROLE_TYPE_CODE,
WD.EMAIL_ADDRESS,
WD.APPROVER_PERSON_NAME,
WD.APPROVAL_COMMENT,
WD.APPROVAL_DATE,
WD.STOP_NAME,
WD.MAP_NAME,
WD.MAP_DESCRIPTION,
WD.WORKFLOW_DETAIL_ID
FROM WORKFLOW_DETAIL WD
WHERE WD.WORKFLOW_ID =
(SELECT MAX(T1.WORKFLOW_ID)
FROM WORKFLOW T1
WHERE T1.MODULE_CODE = 3
AND T1.MODULE_ITEM_ID = AV_MODULE_ITEM_KEY
AND T1.MAP_TYPE ='R');
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE2 = TRUE;
OPEN CUR_ADMINCHK_DATA;
admin_loop : LOOP
FETCH CUR_ADMINCHK_DATA INTO
LI_MAP_ID,
LI_MAP_NUMBER,
LI_APPROVAL_STOP_NUMBER,
LI_APPROVER_NUMBER,
LS_PRIMARY_APPROVER_FLAG,
LS_APPROVER_PERSON_ID,
LS_APPROVAL_STATUS,
LS_UPDATE_USER,
LD_UPDATE_TIMESTAMP,
LI_ROLE_TYPE_CODE,
LS_EMAIL_ADDRESS,
LS_APPROVER_PERSON_NAME,
LS_APPROVAL_COMMENT,
LS_APPROVAL_DATE,
LS_STOP_NAME,
LS_MAP_NAME,
LS_MAP_DESCRIPTION,
LI_SOURCE_WORKFLOW_DETAIL_ID;
IF DONE2 THEN
LEAVE admin_loop;
END IF;

INSERT INTO WORKFLOW_DETAIL(
WORKFLOW_ID,
MAP_ID,
MAP_NUMBER,
APPROVAL_STOP_NUMBER,
APPROVER_NUMBER,
PRIMARY_APPROVER_FLAG,
APPROVER_PERSON_ID,
APPROVAL_STATUS,
UPDATE_USER,
UPDATE_TIMESTAMP,
ROLE_TYPE_CODE,
EMAIL_ADDRESS,
APPROVER_PERSON_NAME,
APPROVAL_COMMENT,
APPROVAL_DATE,
STOP_NAME,
MAP_NAME,
MAP_DESCRIPTION
)
VALUES(
LI_WORKFLOW_ID,
LI_MAP_ID,
LI_MAP_NUMBER,
LI_APPROVAL_STOP_NUMBER,
LI_APPROVER_NUMBER,
LS_PRIMARY_APPROVER_FLAG,
LS_APPROVER_PERSON_ID,
LS_APPROVAL_STATUS,
LS_UPDATE_USER,
LD_UPDATE_TIMESTAMP,
LI_ROLE_TYPE_CODE,
LS_EMAIL_ADDRESS,
LS_APPROVER_PERSON_NAME,
LS_APPROVAL_COMMENT,
LS_APPROVAL_DATE,
LS_STOP_NAME,
LS_MAP_NAME,
LS_MAP_DESCRIPTION 
);
SELECT LAST_INSERT_ID() INTO LI_TARGET_WORKFLOW_DETAIL_ID ;
		BEGIN
        DECLARE LB_ATTACHMENT LONGBLOB;
		DECLARE LS_FILE_NAME_WF_ATTACHMENT varchar(255);
		DECLARE LS_MIME_TYPE varchar(255);
		DECLARE LS_DESCRIPTION varchar(255);
		DECLARE LS_UPDATE_USER_ATTACHMENT varchar(255);
		DECLARE LD_UPDATE_TIMESTAMP_ATTACHMENT DATETIME;
		DECLARE LS_REVIEWER_DETAILS_ID INT;
		DECLARE done_inner INT DEFAULT 0;
        DECLARE inner_cursor CURSOR FOR
		SELECT ATTACHMENT, DESCRIPTION, FILE_NAME, MIME_TYPE, REVIEWER_DETAILS_ID, UPDATE_TIMESTAMP, UPDATE_USER from workflow_attachment where WORKFLOW_DETAIL_ID = LI_SOURCE_WORKFLOW_DETAIL_ID;
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET done_inner = 1;
        OPEN inner_cursor;
        inner_loop: LOOP
            FETCH inner_cursor INTO LB_ATTACHMENT, LS_DESCRIPTION, LS_FILE_NAME_WF_ATTACHMENT,LS_MIME_TYPE,LS_REVIEWER_DETAILS_ID,LD_UPDATE_TIMESTAMP_ATTACHMENT,LS_UPDATE_USER_ATTACHMENT;
            IF done_inner = 1 THEN
                LEAVE inner_loop;
            END IF;

            INSERT INTO workflow_attachment
            (
            ATTACHMENT,
            DESCRIPTION,
            FILE_NAME,
            MIME_TYPE,
            UPDATE_TIMESTAMP,
            UPDATE_USER,
            WORKFLOW_DETAIL_ID,
            REVIEWER_DETAILS_ID)
            VALUES
            (
            LB_ATTACHMENT,
            LS_DESCRIPTION,
            LS_FILE_NAME_WF_ATTACHMENT,
            LS_MIME_TYPE,
            LD_UPDATE_TIMESTAMP_ATTACHMENT,
            LS_UPDATE_USER_ATTACHMENT,
            LI_TARGET_WORKFLOW_DETAIL_ID,
            LS_REVIEWER_DETAILS_ID
            );
        END LOOP;
        CLOSE inner_cursor;	
		END;
END LOOP;
CLOSE CUR_ADMINCHK_DATA;
END;

IF AV_ACTION_TYPE = 'START_EVAL' THEN
BEGIN
DECLARE DONE1 INT DEFAULT FALSE;
DECLARE CUR_EVAL_DATA CURSOR FOR
SELECT DISTINCT
T1.MAP_ID,
T2.PROPOSAL_EVALUATION_ID,
T2.APPROVER_PERSON_ID,
T2.APPROVER_PERSON_NAME,
T2.UPDATE_USER,
T2.UPDATE_TIMESTAMP,
T3.MAP_NAME,
T3.DESCRIPTION,
T4.STOP_NAME
FROM EPS_PROPOSAL_EVALUATION_PANEL T1
INNER JOIN EPS_PROP_EVALPANEL_PERSONS T2 ON T1.PROPOSAL_EVALUATION_ID = T2.PROPOSAL_EVALUATION_ID
LEFT JOIN WORKFLOW_MAP T3 ON T1.MAP_ID = T3.MAP_ID
LEFT JOIN WORKFLOW_MAP_DETAIL T4 ON  T3.MAP_ID = T4.MAP_ID AND T2.APPROVER_NUMBER = T4.APPROVER_NUMBER
WHERE T1.PROPOSAL_ID = AV_MODULE_ITEM_KEY
AND T1.IS_ADMIN_SELECTED = 'Y'
ORDER BY T1.CAN_SCORE DESC;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
SET CUR_MAP_ID = 0;
SET LI_APPROVER_NUMBER = 0;
UPDATE INBOX SET OPENED_FLAG = 'Y' ,UPDATE_TIMESTAMP = UTC_TIMESTAMP(),UPDATE_USER = AV_UPDATE_USER
WHERE MODULE_CODE = AV_MODULE_CODE
AND MODULE_ITEM_KEY = AV_MODULE_ITEM_KEY
AND SUB_MODULE_CODE = AV_SUBMODULE_CODE
AND SUB_MODULE_ITEM_KEY = AV_SUB_MODULE_ITEM_KEY
AND MESSAGE_TYPE_CODE = '112'
AND OPENED_FLAG = 'N' ;
UPDATE INBOX SET OPENED_FLAG = 'E' ,UPDATE_TIMESTAMP = UTC_TIMESTAMP(),UPDATE_USER = AV_UPDATE_USER
WHERE MODULE_CODE = AV_MODULE_CODE
AND MODULE_ITEM_KEY = AV_MODULE_ITEM_KEY
AND SUB_MODULE_CODE = AV_SUBMODULE_CODE
AND SUB_MODULE_ITEM_KEY = AV_SUB_MODULE_ITEM_KEY
AND OPENED_FLAG = 'N' ;
OPEN CUR_EVAL_DATA;
insert_loop: LOOP
FETCH CUR_EVAL_DATA INTO
LI_MAP_ID,
LI_PROPOSAL_EVALUATION_ID,
LS_APPROVER_PERSON_ID,
LS_APPROVER_PERSON_NAME,
LS_UPDATE_USER,
LO_UPDATE_TIMESTAMP,
LS_MAP_NAME,
LS_MAP_DESCRIPTION,
LS_STOP_NAME;
IF DONE1 THEN
LEAVE insert_loop;
END IF;
SELECT COUNT(*) INTO LS_COUNT
FROM EPS_PROPOSAL_PERSONS
WHERE PROPOSAL_ID = AV_MODULE_ITEM_KEY
AND PERSON_ID = LS_APPROVER_PERSON_ID;
IF LS_COUNT = 0 THEN
SELECT EMAIL_ADDRESS INTO LS_EMAIL_ADDRESS FROM PERSON
WHERE PERSON_ID = LS_APPROVER_PERSON_ID;
IF  CUR_MAP_ID <>  LI_MAP_ID THEN
SELECT (CASE WHEN MAX(W2.MAP_NUMBER) IS NULL THEN 1
ELSE MAX(W2.MAP_NUMBER)+1 END) INTO MAX_MAP_NUMBER
FROM WORKFLOW W1
LEFT JOIN WORKFLOW_DETAIL W2 ON W1.WORKFLOW_ID = W2.WORKFLOW_ID
WHERE W1.WORKFLOW_ID = LI_WORKFLOW_ID;
SET CUR_MAP_ID = LI_MAP_ID;
END IF;
SET LI_APPROVER_NUMBER = LI_APPROVER_NUMBER + 1;
INSERT INTO WORKFLOW_DETAIL(
WORKFLOW_ID,
MAP_ID,
MAP_NUMBER,
APPROVAL_STOP_NUMBER,
APPROVER_NUMBER,
PRIMARY_APPROVER_FLAG,
APPROVER_PERSON_ID,
APPROVAL_STATUS,
UPDATE_USER,
UPDATE_TIMESTAMP,
ROLE_TYPE_CODE,
EMAIL_ADDRESS,
APPROVER_PERSON_NAME,
MAP_NAME,
MAP_DESCRIPTION,
STOP_NAME
)
VALUES(
LI_WORKFLOW_ID,
LI_MAP_ID,
MAX_MAP_NUMBER,
1,
LI_APPROVER_NUMBER,
'Y',
LS_APPROVER_PERSON_ID,
'W',
LS_UPDATE_USER,
utc_timestamp(),
NULL,
LS_EMAIL_ADDRESS,
LS_APPROVER_PERSON_NAME,
LS_MAP_NAME,
LS_MAP_DESCRIPTION,
LS_STOP_NAME
);
CALL ADD_TO_INBOX(AV_MODULE_CODE,AV_MODULE_ITEM_KEY,LS_APPROVER_PERSON_ID,'R',LS_USER_MESSAGE,AV_UPDATE_USER,LS_MSG_TYPE,AV_SUBMODULE_CODE,AV_SUB_MODULE_ITEM_KEY);
END IF;
END LOOP;
CLOSE CUR_EVAL_DATA;
END;
ELSEIF AV_ACTION_TYPE = 'CONTINUE_EVAL' THEN
BEGIN
DECLARE DONE3 INT DEFAULT FALSE;
DECLARE CUR_EVAL_DATA CURSOR FOR
SELECT DISTINCT
T1.MAP_ID,
T2.PROPOSAL_EVALUATION_ID,
T2.APPROVER_PERSON_ID,
T2.APPROVER_PERSON_NAME,
T2.UPDATE_USER,
T2.UPDATE_TIMESTAMP,
T3.MAP_NAME,
T3.DESCRIPTION,
T4.STOP_NAME
FROM EPS_PROPOSAL_EVALUATION_PANEL T1
INNER JOIN EPS_PROP_EVALPANEL_PERSONS T2 ON T1.PROPOSAL_EVALUATION_ID = T2.PROPOSAL_EVALUATION_ID
LEFT JOIN WORKFLOW_MAP T3 ON T1.MAP_ID = T3.MAP_ID
LEFT JOIN WORKFLOW_MAP_DETAIL T4 ON T3.MAP_ID = T4.MAP_ID AND T2.APPROVER_NUMBER = T4.APPROVER_NUMBER
WHERE T1.PROPOSAL_ID = AV_MODULE_ITEM_KEY
AND T1.IS_ADMIN_SELECTED = 'Y'
ORDER BY T1.CAN_SCORE DESC;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE3 = TRUE;
SET CUR_MAP_ID = 0;
SET LI_APPROVER_NUMBER = 0;
OPEN CUR_EVAL_DATA;
continue_loop: LOOP
FETCH CUR_EVAL_DATA INTO
LI_MAP_ID,
LI_PROPOSAL_EVALUATION_ID,
LS_APPROVER_PERSON_ID,
LS_APPROVER_PERSON_NAME,
LS_UPDATE_USER,
LO_UPDATE_TIMESTAMP,
LS_MAP_NAME,
LS_MAP_DESCRIPTION,
LS_STOP_NAME;
IF DONE3 THEN
LEAVE continue_loop;
END IF;
SELECT COUNT(*) INTO LS_COUNT
FROM EPS_PROPOSAL_PERSONS
WHERE PROPOSAL_ID = AV_MODULE_ITEM_KEY
AND PERSON_ID = LS_APPROVER_PERSON_ID;
IF LS_COUNT = 0 THEN
IF  CUR_MAP_ID <>  LI_MAP_ID THEN
SELECT (CASE WHEN MAX(W2.MAP_NUMBER) IS NULL THEN 1
ELSE MAX(W2.MAP_NUMBER)+1 END) INTO MAX_MAP_NUMBER
FROM WORKFLOW W1
LEFT JOIN WORKFLOW_DETAIL W2 ON W1.WORKFLOW_ID = W2.WORKFLOW_ID
WHERE W1.WORKFLOW_ID = LI_WORKFLOW_ID;
SET CUR_MAP_ID = LI_MAP_ID;
END IF;
SELECT COUNT(*),W2.WORKFLOW_DETAIL_ID INTO LS_COUNT,LW_WORKFLOW_DETAIL_ID
FROM WORKFLOW W1
LEFT JOIN WORKFLOW_DETAIL W2 ON W1.WORKFLOW_ID = W2.WORKFLOW_ID
WHERE W2.APPROVER_PERSON_ID = LS_APPROVER_PERSON_ID
AND W1.WORKFLOW_ID = LS_WORKFLOW_ID_OLD
AND W2.MAP_ID = LI_MAP_ID
AND W2.PRIMARY_APPROVER_FLAG = 'Y';
IF LS_COUNT > 0 THEN
SET LI_APPROVER_NUMBER = LI_APPROVER_NUMBER + 1;
INSERT INTO WORKFLOW_DETAIL(
WORKFLOW_ID,
MAP_ID,
MAP_NUMBER,
APPROVAL_STOP_NUMBER,
APPROVER_NUMBER,
PRIMARY_APPROVER_FLAG,
APPROVER_PERSON_ID,
APPROVAL_STATUS,
UPDATE_USER,
UPDATE_TIMESTAMP,
ROLE_TYPE_CODE,
EMAIL_ADDRESS,
APPROVER_PERSON_NAME,
APPROVAL_COMMENT,
APPROVAL_DATE,
MAP_NAME,
MAP_DESCRIPTION,
STOP_NAME
)
SELECT
LI_WORKFLOW_ID,
MAP_ID,
MAX_MAP_NUMBER,
APPROVAL_STOP_NUMBER,
LI_APPROVER_NUMBER,
PRIMARY_APPROVER_FLAG,
APPROVER_PERSON_ID,
APPROVAL_STATUS,
UPDATE_USER,
UPDATE_TIMESTAMP,
ROLE_TYPE_CODE,
EMAIL_ADDRESS,
APPROVER_PERSON_NAME ,
APPROVAL_COMMENT,
APPROVAL_DATE,
MAP_NAME,
MAP_DESCRIPTION,
STOP_NAME
FROM WORKFLOW_DETAIL
WHERE WORKFLOW_DETAIL_ID = LW_WORKFLOW_DETAIL_ID;
SELECT COUNT(*) INTO LS_COUNT
FROM WORKFLOW_REVIEWER_SCORE
WHERE WORKFLOW_DETAIL_ID = LW_WORKFLOW_DETAIL_ID;
IF LS_COUNT>0 THEN
BEGIN
DECLARE DONE4 INT DEFAULT FALSE;
DECLARE CUR_SCORE_DATA CURSOR FOR
SELECT  WORKFLOW_REVIEWER_SCORE_ID,
SCORING_CRITERIA_TYPE_CODE,
SCORE,
UPDATE_USER,
UPDATE_TIMESTAMP
FROM WORKFLOW_REVIEWER_SCORE
WHERE WORKFLOW_DETAIL_ID = LW_WORKFLOW_DETAIL_ID;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE4 = TRUE;
SELECT LAST_INSERT_ID() INTO LS_SEQ_WORKFLOW_DETAIL_ID;
OPEN CUR_SCORE_DATA;
score_loop: LOOP
FETCH CUR_SCORE_DATA INTO
LI_WORKFLOW_REVIEWER_SCORE_ID,
LI_SCORING_CRITERIA_TYPE_CODE,
LI_SCORE,
LS_UPDATE_USER,
LD_UPDATE_TIMESTAMP;
IF DONE4 THEN
LEAVE score_loop;
END IF;
INSERT INTO WORKFLOW_REVIEWER_SCORE(
WORKFLOW_DETAIL_ID,
SCORING_CRITERIA_TYPE_CODE,
SCORE,
UPDATE_USER,
UPDATE_TIMESTAMP
)
VALUES(
LS_SEQ_WORKFLOW_DETAIL_ID,
LI_SCORING_CRITERIA_TYPE_CODE,
LI_SCORE,
LS_UPDATE_USER,
LD_UPDATE_TIMESTAMP
);
SELECT COUNT(*) INTO LS_COUNT
FROM WORKFLOW_REVIEWER_COMMENTS
WHERE WORKFLOW_REVIEWER_SCORE_ID = LI_WORKFLOW_REVIEWER_SCORE_ID;
IF LS_COUNT > 0 THEN
BEGIN
DECLARE DONE5 INT DEFAULT FALSE;
DECLARE CUR_COMMENT_DATA CURSOR FOR
SELECT  WORKFLOW_REVIEWER_COMMENTS_ID,
IS_PRIVATE,
COMMENT,
UPDATE_USER,
UPDATE_TIMESTAMP
FROM WORKFLOW_REVIEWER_COMMENTS
WHERE WORKFLOW_REVIEWER_SCORE_ID = LI_WORKFLOW_REVIEWER_SCORE_ID;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE5 = TRUE;
SELECT LAST_INSERT_ID() INTO LS_WORKFLOW_REVIEWER_SCORE_ID;
OPEN CUR_COMMENT_DATA;
comments_loop: LOOP
FETCH CUR_COMMENT_DATA INTO
LI_OLD_WORKFLOW_COMMENTS_ID,
LS_IS_PUBLIC,
LS_COMMENT,
LS_UPDATE_USER,
LD_UPDATE_TIMESTAMP;
IF DONE5 THEN
LEAVE comments_loop;
END IF;
INSERT INTO WORKFLOW_REVIEWER_COMMENTS(
WORKFLOW_REVIEWER_SCORE_ID,
IS_PRIVATE,
COMMENT,
UPDATE_USER,
UPDATE_TIMESTAMP
)
VALUES(
LS_WORKFLOW_REVIEWER_SCORE_ID,
LS_IS_PUBLIC,
LS_COMMENT,
LS_UPDATE_USER,
LD_UPDATE_TIMESTAMP
);
SELECT COUNT(*) INTO LS_COUNT
FROM WORKFLOW_REVIEWER_ATTMNTS
WHERE WORKFLOW_REVIEWER_COMMENTS_ID = LI_OLD_WORKFLOW_COMMENTS_ID;
IF LS_COUNT > 0 THEN
BEGIN
DECLARE DONE6 INT DEFAULT FALSE;
DECLARE CUR_ATT_DATA CURSOR FOR
SELECT  T1.WORKFLOW_REVIEWER_ATTMNTS_ID,
T1.WORKFLOW_REVIEWER_COMMENTS_ID,
T1.FILE_NAME,
T1.MIME_TYPE,
T1.FILE_DATA_ID,
T2.DATA,
T1.UPDATE_USER,
T1.UPDATE_TIMESTAMP
FROM WORKFLOW_REVIEWER_ATTMNTS T1 LEFT JOIN FILE_DATA T2  ON T1.FILE_DATA_ID = T2.ID
WHERE T1.WORKFLOW_REVIEWER_COMMENTS_ID = LI_OLD_WORKFLOW_COMMENTS_ID;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE6 = TRUE;
SELECT LAST_INSERT_ID() INTO LI_WORKFLOW_REVIEWER_COMMENTS_ID;
OPEN CUR_ATT_DATA;
attachment_loop: LOOP
FETCH CUR_ATT_DATA INTO
LI_WORKFLOW_ATTMNTS_ID,
LI_WORKFLOW_COMMENTS_ID,
LS_FILE_NAME,
LS_MIME_TYPE,
LS_FILE_DATA_ID,
LB_DATA,
LS_ATT_UPDATE_USER,
LD_ATT_UPDATE_TIMESTAMP ;
IF DONE6 THEN
LEAVE attachment_loop;
END IF;
SET LS_FILE_DATA_ID = UUID();
INSERT INTO WORKFLOW_REVIEWER_ATTMNTS(
WORKFLOW_REVIEWER_COMMENTS_ID,
FILE_NAME,
MIME_TYPE,
FILE_DATA_ID,
UPDATE_USER,
UPDATE_TIMESTAMP
)
VALUES(
LI_WORKFLOW_REVIEWER_COMMENTS_ID,
LS_FILE_NAME,
LS_MIME_TYPE,
LS_FILE_DATA_ID,
LS_ATT_UPDATE_USER,
LD_ATT_UPDATE_TIMESTAMP
);
INSERT INTO FILE_DATA(ID,DATA) VALUES(LS_FILE_DATA_ID,LB_DATA);
END LOOP;
CLOSE CUR_ATT_DATA;
END;
END IF;
END LOOP;
CLOSE CUR_COMMENT_DATA;
END;
END IF;
END LOOP;
CLOSE CUR_SCORE_DATA;
END;
END IF;
ELSE
SELECT EMAIL_ADDRESS INTO LS_EMAIL_ADDRESS FROM PERSON
WHERE PERSON_ID = LS_APPROVER_PERSON_ID;
SET LI_APPROVER_NUMBER = LI_APPROVER_NUMBER + 1;
INSERT INTO WORKFLOW_DETAIL(
WORKFLOW_ID,
MAP_ID,
MAP_NUMBER,
APPROVAL_STOP_NUMBER,
APPROVER_NUMBER,
PRIMARY_APPROVER_FLAG,
APPROVER_PERSON_ID,
APPROVAL_STATUS,
UPDATE_USER,
UPDATE_TIMESTAMP,
ROLE_TYPE_CODE,
EMAIL_ADDRESS,
APPROVER_PERSON_NAME,
MAP_NAME,
MAP_DESCRIPTION,
STOP_NAME
)
VALUES(
LI_WORKFLOW_ID,
LI_MAP_ID,
MAX_MAP_NUMBER,
1,
LI_APPROVER_NUMBER,
'Y',
LS_APPROVER_PERSON_ID,
'W',
LS_UPDATE_USER,
UTC_TIMESTAMP(),
NULL,
LS_EMAIL_ADDRESS,
LS_APPROVER_PERSON_NAME,
LS_MAP_NAME,
LS_MAP_DESCRIPTION,
LS_STOP_NAME
);
CALL ADD_TO_INBOX(AV_MODULE_CODE,AV_MODULE_ITEM_KEY,LS_APPROVER_PERSON_ID,'R',LS_USER_MESSAGE,AV_UPDATE_USER,LS_MSG_TYPE,AV_SUBMODULE_CODE,AV_SUB_MODULE_ITEM_KEY);
END IF;
END IF;
END LOOP;
CLOSE CUR_EVAL_DATA;
END;
END IF;
SET SQL_SAFE_UPDATES = 0;
UPDATE WORKFLOW_REVIEWER_SCORE_ID_GENERATOR SET NEXT_VAL =    (SELECT (CASE WHEN MAX(WORKFLOW_REVIEWER_SCORE_ID) IS NULL THEN 1
ELSE MAX(WORKFLOW_REVIEWER_SCORE_ID)+1 END)
FROM WORKFLOW_REVIEWER_SCORE);
UPDATE WORKFLOW_REVIEWER_COMMENTS_ID_GENERATOR SET NEXT_VAL =    (SELECT (CASE WHEN MAX(WORKFLOW_REVIEWER_COMMENTS_ID) IS NULL THEN 1
ELSE MAX(WORKFLOW_REVIEWER_COMMENTS_ID)+1 END)
FROM WORKFLOW_REVIEWER_COMMENTS);
UPDATE WORKFLOW_REVIEWER_ATTMNTS_ID_GENERATOR SET NEXT_VAL =    (SELECT (CASE WHEN MAX(WORKFLOW_REVIEWER_ATTMNTS_ID) IS NULL THEN 1
ELSE MAX(WORKFLOW_REVIEWER_ATTMNTS_ID)+1 END)
FROM WORKFLOW_REVIEWER_ATTMNTS);
RETURN 1;
END
//