DELIMITER //
CREATE PROCEDURE `GET_ENTITY_TAB_STATUS`(
AV_ENTITY_ID                        INT(10)
)
BEGIN

DECLARE LI_SAO_COUNT 					INT(11);
DECLARE LI_ESI_COUNT 					INT(11);
DECLARE LI_E_COUNT 						INT(11);

SELECT COUNT(*) INTO LI_SAO_COUNT
FROM entity_risk ER
INNER JOIN entity_risk_type ERT ON ER.RISK_TYPE_CODE = ERT.RISK_TYPE_CODE
WHERE ER.ENTITY_ID = AV_ENTITY_ID;

IF LI_SAO_COUNT > 0 THEN
	SET LI_SAO_COUNT = 0;
	SELECT COUNT(*) INTO LI_SAO_COUNT
	FROM entity_sub_org_info ESOI
	WHERE ESOI.ENTITY_ID = AV_ENTITY_ID AND ESOI.ORGANIZATION_TYPE_CODE IS NOT NULL;
END IF;

SELECT COUNT(*) INTO LI_ESI_COUNT 
FROM entity_sponsor_info ESI 
where ESI.ENTITY_ID = AV_ENTITY_ID AND ESI.SPONSOR_TYPE_CODE IS NOT NULL;

SELECT COUNT(*) INTO LI_E_COUNT
FROM entity e 
where e.ENTITY_ID = AV_ENTITY_ID AND e.PRIMARY_NAME IS NOT NULL
AND e.ENTITY_OWNERSHIP_TYPE_CODE IS NOT NULL AND e.PRIMARY_ADDRESS_LINE_1 IS NOT NULL 
AND e.CITY IS NOT NULL AND e.STATE IS NOT NULL AND e.POST_CODE IS NOT NULL AND e.COUNTRY_CODE IS NOT NULL;

SELECT 
    CASE 
        WHEN LI_SAO_COUNT > 0 THEN TRUE
        ELSE FALSE
    END AS entity_sub_org_info,
    CASE 
        WHEN LI_ESI_COUNT > 0 THEN TRUE
        ELSE FALSE
    END AS entity_sponsor_info,
    CASE 
        WHEN LI_E_COUNT > 0 THEN TRUE
        ELSE FALSE 
    END AS entity_overview
FROM DUAL;

END
//
