DELIMITER //
CREATE PROCEDURE `SYNC_SFIS_AND_DISCLOSURE`(
AV_DISCLOSURE_ID   	     INT(30),
AV_DISCLOSURE_NUMBER   	 INT(30),
AV_PERSON_ID             VARCHAR(45),
AV_UPDATE_USER           VARCHAR(45),
AV_PERSON_ENTITY_ID      VARCHAR(30),
AV_MODULE_CODE           INT(3),
AV_MODULE_ITEM_KEY       VARCHAR(30),
AV_TYPE                  VARCHAR(3)
)
BEGIN

/**
    AV_TYPE = F   // Create FCOI
    AV_TYPE = RF  // Revise FCOI
    AV_TYPE = P   // Project Disclosure
    AV_TYPE = S   // create/activate SFI
    AV_TYPE = IS  // Inactivate SFI
    AV_TYPE = FS  // Finalize SFI
*/

DECLARE LI_PERSON_ENTITY_ID     VARCHAR(30);
DECLARE LI_ENTITY_ID            VARCHAR(30);
DECLARE LI_ENTITY_NUMBER        VARCHAR(30);
DECLARE LI_MODULE_CODE          VARCHAR(30);
DECLARE LI_MODULE_ITEM_KEY      VARCHAR(30);
DECLARE LI_IS_VALUE             INT DEFAULT 0;
DECLARE LI_DISCLOSURE_ID   	    INT(30);
DECLARE LI_DISCLOSURE_NUMBER   	INT(30);
DECLARE LI_PERSON_ID            VARCHAR(40);
DECLARE LI_PERSON_ENTITY_NUMBER     VARCHAR(30);

    BEGIN 
        /**
            For FCOI creation this check has been done. AlL the active SFIs against a person will sync with the proposals and awards
        */
        IF AV_TYPE = 'F' AND AV_PERSON_ENTITY_ID IS NULL AND AV_MODULE_ITEM_KEY IS NULL AND AV_DISCLOSURE_ID IS NOT NULL THEN
            BEGIN 
                DECLARE DONE1 INT DEFAULT FALSE;
                                            
                DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER FROM PERSON_ENTITY WHERE VERSION_STATUS='ACTIVE' 
                    AND IS_RELATIONSHIP_ACTIVE = 'Y' AND PERSON_ID = AV_PERSON_ID;

                DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                                
                OPEN CUR_ENTITIES;
                ENTITIES_LOOP: LOOP 
                FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER;

                    IF DONE1 THEN
                        IF LI_IS_VALUE = 0 THEN
                            SELECT FN_SYNC_SFI_WITH_FCOI_DISC(1, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, null, null, null);
                            SELECT FN_SYNC_SFI_WITH_FCOI_DISC(3, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, null, null, null);
                        END IF;
                        LEAVE ENTITIES_LOOP;
                    END IF;
                    SET LI_IS_VALUE = 1;
                    SELECT FN_SYNC_SFI_WITH_FCOI_DISC(1, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
                    SELECT FN_SYNC_SFI_WITH_FCOI_DISC(3, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
            
                END LOOP;
                CLOSE CUR_ENTITIES;
            END;
        /**
            This check is to sync the not added SFIs on revise fcoi
        */
        ELSEIF AV_TYPE = 'RF' AND AV_PERSON_ENTITY_ID IS NULL AND AV_MODULE_ITEM_KEY IS NULL AND AV_DISCLOSURE_ID IS NOT NULL THEN

            BEGIN 
                DECLARE DONE1 INT DEFAULT FALSE;
                                            
                DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER FROM PERSON_ENTITY 
                    WHERE VERSION_STATUS='ACTIVE' AND IS_RELATIONSHIP_ACTIVE = 'Y'  AND PERSON_ID = AV_PERSON_ID AND PERSON_ENTITY_ID NOT IN (SELECT DISTINCT PERSON_ENTITY_ID FROM COI_DISCL_ENT_PROJ_DETAILS 
                     WHERE PERSON_ENTITY_ID IS NOT null AND DISCLOSURE_ID = AV_DISCLOSURE_ID);

                DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                                
                OPEN CUR_ENTITIES;
                ENTITIES_LOOP: LOOP 
                FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER;

                    IF DONE1 THEN
                        LEAVE ENTITIES_LOOP;
                    END IF;
                    
                    SELECT FN_SYNC_SFI_WITH_FCOI_DISC(1, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
                    SELECT FN_SYNC_SFI_WITH_FCOI_DISC(3, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
            
                END LOOP;
                CLOSE CUR_ENTITIES;
            END;

        /**
            This check is cretate new project disclosure, for project disclosre creation AV_MODULE_ITEM_KEY will not be null
        */
        ELSEIF AV_TYPE = 'P' AND AV_PERSON_ENTITY_ID IS NULL AND AV_MODULE_ITEM_KEY IS NOT NULL AND AV_DISCLOSURE_ID IS NOT NULL THEN

            BEGIN 
                DECLARE DONE1 INT DEFAULT FALSE;
                                            
                DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER FROM PERSON_ENTITY WHERE VERSION_STATUS='ACTIVE' 
                    AND IS_RELATIONSHIP_ACTIVE = 'Y' AND PERSON_ID = AV_PERSON_ID;

                DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                                
                OPEN CUR_ENTITIES;
                ENTITIES_LOOP: LOOP 
                FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER;

                    IF DONE1 THEN
                        IF LI_IS_VALUE = 0 THEN
                            INSERT INTO COI_DISCL_ENT_PROJ_DETAILS(`DISCLOSURE_ID`, `DISCLOSURE_NUMBER`, `MODULE_CODE`, `MODULE_ITEM_KEY`, 
                                `UPDATE_TIMESTAMP`, `UPDATE_USER`) VALUES(AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, AV_MODULE_CODE,
                                AV_MODULE_ITEM_KEY, now(), AV_UPDATE_USER);
                        END IF;
                        LEAVE ENTITIES_LOOP;
                    END IF;
                    SET LI_IS_VALUE = 1;
                    INSERT INTO COI_DISCL_ENT_PROJ_DETAILS(`DISCLOSURE_ID`, `DISCLOSURE_NUMBER`, `PERSON_ENTITY_ID`, `ENTITY_ID`, `ENTITY_NUMBER`, `MODULE_CODE`, `MODULE_ITEM_KEY`, 
                            `UPDATE_TIMESTAMP`, `UPDATE_USER`) VALUES(AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER, AV_MODULE_CODE,
                            AV_MODULE_ITEM_KEY, now(), AV_UPDATE_USER);
                END LOOP;
                CLOSE CUR_ENTITIES;
            END;

        /**
            Sync a SFI with projects on a disclosure(for add new SFI on a disclosure)
        */
        ELSEIF AV_TYPE = 'S' AND AV_PERSON_ENTITY_ID <> '' THEN

        BEGIN
            DECLARE DONE1 INT DEFAULT FALSE;
                                        
            DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER, PERSON_ID FROM PERSON_ENTITY WHERE PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID
                AND VERSION_STATUS='ACTIVE' AND IS_RELATIONSHIP_ACTIVE = 'Y';

            DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                            
            OPEN CUR_ENTITIES;
            ENTITIES_LOOP: LOOP 
            FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER, LI_PERSON_ID;

                IF DONE1 THEN
                    LEAVE ENTITIES_LOOP;
                END IF;

                BEGIN
                    DECLARE DONE2 INT DEFAULT FALSE;
                    
                    DECLARE CUR_PROJECTS CURSOR FOR SELECT DISTINCT T1.MODULE_ITEM_KEY, T1.MODULE_CODE, T2.DISCLOSURE_ID, T2.DISCLOSURE_NUMBER FROM COI_DISCL_ENT_PROJ_DETAILS T1 
                        INNER JOIN COI_DISCLOSURE T2 ON T1.DISCLOSURE_ID = T2.DISCLOSURE_ID WHERE T2.VERSION_STATUS = 'PENDING' AND T2.REVIEW_STATUS_CODE = 1 
                        AND T2.PERSON_ID = LI_PERSON_ID;
                    DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE2 = TRUE;
                                
                    OPEN CUR_PROJECTS;
                    PROJECTS_LOOP: LOOP 
                    FETCH CUR_PROJECTS INTO  LI_MODULE_ITEM_KEY, LI_MODULE_CODE, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER;
            
                        IF DONE2 THEN
                            LEAVE PROJECTS_LOOP;
                        END IF;

                        INSERT INTO COI_DISCL_ENT_PROJ_DETAILS(`DISCLOSURE_ID`, `DISCLOSURE_NUMBER`, `PERSON_ENTITY_ID`, `ENTITY_ID`, `ENTITY_NUMBER`, `MODULE_CODE`, `MODULE_ITEM_KEY`, 
                            `UPDATE_TIMESTAMP`, `UPDATE_USER`) VALUES(LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER, LI_MODULE_CODE,
                            LI_MODULE_ITEM_KEY, now(), AV_UPDATE_USER);

                    END LOOP;
                    CLOSE CUR_PROJECTS;
                END;
                BEGIN
                    DELETE T1 FROM COI_DISCL_ENT_PROJ_DETAILS T1 INNER JOIN COI_DISCLOSURE T2 ON T1.DISCLOSURE_ID = T2.DISCLOSURE_ID 
                        WHERE T1.PERSON_ENTITY_ID IS NULL AND T2.VERSION_STATUS = 'PENDING' AND T2.PERSON_ID = LI_PERSON_ID;
                END;
            END LOOP;
            CLOSE CUR_ENTITIES;
        END;
        /* Inactivate SFI and resync projects */
        ELSEIF AV_TYPE = 'IS' THEN

            SELECT PERSON_ID INTO LI_PERSON_ID FROM PERSON_ENTITY WHERE PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID;

            DELETE T3 FROM COI_DISCLOSURE T1 INNER JOIN COI_DISCL_ENT_PROJ_DETAILS T2 ON T2.DISCLOSURE_ID = T1.DISCLOSURE_ID
            INNER JOIN DISCL_COMMENT T3 ON T3.COMPONENT_REFERENCE_ID = T2.DISCLOSURE_DETAILS_ID WHERE T3.COMPONENT_TYPE_CODE = 1 AND T3.COMMENT_TYPE = 1
            AND T1.VERSION_STATUS = 'PENDING' AND T1.REVIEW_STATUS_CODE = 1 AND T2.PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID;

            DELETE T1 FROM COI_DISCL_ENT_PROJ_DETAILS T1 INNER JOIN COI_DISCLOSURE T2 ON T1.DISCLOSURE_ID = T2.DISCLOSURE_ID 
                        WHERE T2.VERSION_STATUS = 'PENDING' AND T2.REVIEW_STATUS_CODE = 1 AND T1.PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID AND T2.PERSON_ID = LI_PERSON_ID;

            BEGIN
                DECLARE DONE1 INT DEFAULT FALSE;
                
                DECLARE CUR_PROJECTS CURSOR FOR SELECT DISTINCT T1.MODULE_ITEM_KEY, T1.MODULE_CODE, T1.DISCLOSURE_ID, T1.DISCLOSURE_NUMBER FROM COI_DISCLOSURE T1 WHERE 
                    T1.DISCLOSURE_ID NOT IN (SELECT DISTINCT T3.DISCLOSURE_ID FROM COI_DISCL_ENT_PROJ_DETAILS T3 
                    INNER JOIN COI_DISCLOSURE T4 ON T3.DISCLOSURE_ID = T4.DISCLOSURE_ID WHERE T4.VERSION_STATUS = 'PENDING' AND T4.PERSON_ID = LI_PERSON_ID) 
                    AND T1.VERSION_STATUS = 'PENDING' AND T1.REVIEW_STATUS_CODE = 1 AND T1.PERSON_ID = LI_PERSON_ID;
                
                DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;

                OPEN CUR_PROJECTS;
                PROJECTS_LOOP: LOOP 
                FETCH CUR_PROJECTS INTO  LI_MODULE_ITEM_KEY, LI_MODULE_CODE, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER;
            
                    IF DONE1 THEN
                        LEAVE PROJECTS_LOOP;
                    END IF;

                    IF LI_MODULE_ITEM_KEY IS NULL THEN 

                        SELECT FN_SYNC_SFI_WITH_FCOI_DISC(1, LI_PERSON_ID, AV_UPDATE_USER, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, null, null, null);
                        SELECT FN_SYNC_SFI_WITH_FCOI_DISC(3, LI_PERSON_ID, AV_UPDATE_USER, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, null, null, null);

                    ELSE

                        INSERT INTO COI_DISCL_ENT_PROJ_DETAILS(`DISCLOSURE_ID`, `DISCLOSURE_NUMBER`, `MODULE_CODE`, `MODULE_ITEM_KEY`, 
                            `UPDATE_TIMESTAMP`, `UPDATE_USER`) VALUES(LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, LI_MODULE_CODE,
                                LI_MODULE_ITEM_KEY, now(), AV_UPDATE_USER);
                    END IF;

                END LOOP;
                CLOSE CUR_PROJECTS;

            END;

        /** Finalize SFI : deletes all the COI_DISCL_ENT_PROJ_DETAILS etries of active
            parent SFI and resyncs with the current finalized SFI of pending disclosures
        */
        ELSEIF AV_TYPE = 'FS' THEN

            SELECT PERSON_ENTITY_NUMBER INTO LI_PERSON_ENTITY_NUMBER FROM PERSON_ENTITY WHERE PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID;

            SELECT PERSON_ID, PERSON_ENTITY_ID INTO LI_PERSON_ID, LI_PERSON_ENTITY_ID FROM PERSON_ENTITY WHERE PERSON_ENTITY_NUMBER = LI_PERSON_ENTITY_NUMBER AND
                IS_RELATIONSHIP_ACTIVE = 'Y' AND VERSION_STATUS = 'ACTIVE' AND PERSON_ENTITY_ID != AV_PERSON_ENTITY_ID;

            IF LI_PERSON_ID IS NOT NULL OR LI_PERSON_ID != '' THEN

                DELETE T3 FROM COI_DISCLOSURE T1 INNER JOIN COI_DISCL_ENT_PROJ_DETAILS T2 ON T2.DISCLOSURE_ID = T1.DISCLOSURE_ID
                INNER JOIN DISCL_COMMENT T3 ON T3.COMPONENT_REFERENCE_ID = T2.DISCLOSURE_DETAILS_ID WHERE T3.COMPONENT_TYPE_CODE = 1 AND T3.COMMENT_TYPE = 1
                AND T1.VERSION_STATUS = 'PENDING' AND T1.REVIEW_STATUS_CODE = 1 AND T2.PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID;

                DELETE T1 FROM COI_DISCL_ENT_PROJ_DETAILS T1 INNER JOIN COI_DISCLOSURE T2 ON T1.DISCLOSURE_ID = T2.DISCLOSURE_ID
                        WHERE T2.VERSION_STATUS = 'PENDING' AND T2.REVIEW_STATUS_CODE = 1 AND T1.PERSON_ENTITY_ID = LI_PERSON_ENTITY_ID AND T2.PERSON_ID = LI_PERSON_ID;

                UPDATE PERSON_ENTITY SET VERSION_STATUS = 'ARCHIVE' WHERE PERSON_ENTITY_ID = LI_PERSON_ENTITY_ID;
                BEGIN
                    DECLARE DONE1 INT DEFAULT FALSE;

                    DECLARE CUR_PROJECTS CURSOR FOR SELECT DISTINCT T1.MODULE_ITEM_KEY, T1.MODULE_CODE, T1.DISCLOSURE_ID, T1.DISCLOSURE_NUMBER FROM COI_DISCLOSURE T1 WHERE
                        T1.DISCLOSURE_ID NOT IN (SELECT DISTINCT T3.DISCLOSURE_ID FROM COI_DISCL_ENT_PROJ_DETAILS T3
                        INNER JOIN COI_DISCLOSURE T4 ON T3.DISCLOSURE_ID = T4.DISCLOSURE_ID WHERE T4.VERSION_STATUS = 'PENDING' AND T4.PERSON_ID = LI_PERSON_ID)
                        AND T1.VERSION_STATUS = 'PENDING' AND T1.REVIEW_STATUS_CODE = 1 AND T1.PERSON_ID = LI_PERSON_ID;

                    DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;

                    OPEN CUR_PROJECTS;
                    PROJECTS_LOOP: LOOP
                    FETCH CUR_PROJECTS INTO  LI_MODULE_ITEM_KEY, LI_MODULE_CODE, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER;

                        IF DONE1 THEN
                            LEAVE PROJECTS_LOOP;
                        END IF;

                        IF LI_MODULE_ITEM_KEY IS NULL THEN

                            SELECT FN_SYNC_SFI_WITH_FCOI_DISC(1, LI_PERSON_ID, AV_UPDATE_USER, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, null, null, null);
                            SELECT FN_SYNC_SFI_WITH_FCOI_DISC(3, LI_PERSON_ID, AV_UPDATE_USER, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, null, null, null);

                        ELSE

                            INSERT INTO COI_DISCL_ENT_PROJ_DETAILS(`DISCLOSURE_ID`, `DISCLOSURE_NUMBER`, `MODULE_CODE`, `MODULE_ITEM_KEY`,
                                `UPDATE_TIMESTAMP`, `UPDATE_USER`) VALUES(LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, LI_MODULE_CODE,
                                    LI_MODULE_ITEM_KEY, now(), AV_UPDATE_USER);
                        END IF;

                    END LOOP;
                    CLOSE CUR_PROJECTS;

                END;

            END IF;
            BEGIN
                DECLARE DONE1 INT DEFAULT FALSE;

                DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER, PERSON_ID FROM PERSON_ENTITY WHERE PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID
                    AND VERSION_STATUS='ACTIVE' AND IS_RELATIONSHIP_ACTIVE = 'Y';

                DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;

                OPEN CUR_ENTITIES;
                ENTITIES_LOOP: LOOP
                FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER, LI_PERSON_ID;

                    IF DONE1 THEN
                        LEAVE ENTITIES_LOOP;
                    END IF;

                    BEGIN
                        DECLARE DONE2 INT DEFAULT FALSE;

                        DECLARE CUR_PROJECTS CURSOR FOR SELECT DISTINCT T1.MODULE_ITEM_KEY, T1.MODULE_CODE, T2.DISCLOSURE_ID, T2.DISCLOSURE_NUMBER FROM COI_DISCL_ENT_PROJ_DETAILS T1
                            INNER JOIN COI_DISCLOSURE T2 ON T1.DISCLOSURE_ID = T2.DISCLOSURE_ID WHERE T2.VERSION_STATUS = 'PENDING' AND T2.REVIEW_STATUS_CODE = 1
                            AND T2.PERSON_ID = LI_PERSON_ID;
                        DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE2 = TRUE;

                        OPEN CUR_PROJECTS;
                        PROJECTS_LOOP: LOOP
                        FETCH CUR_PROJECTS INTO  LI_MODULE_ITEM_KEY, LI_MODULE_CODE, LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER;

                            IF DONE2 THEN
                                LEAVE PROJECTS_LOOP;
                            END IF;

                            INSERT INTO COI_DISCL_ENT_PROJ_DETAILS(`DISCLOSURE_ID`, `DISCLOSURE_NUMBER`, `PERSON_ENTITY_ID`, `ENTITY_ID`, `ENTITY_NUMBER`, `MODULE_CODE`, `MODULE_ITEM_KEY`,
                                `UPDATE_TIMESTAMP`, `UPDATE_USER`) VALUES(LI_DISCLOSURE_ID, LI_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER, LI_MODULE_CODE,
                                LI_MODULE_ITEM_KEY, now(), AV_UPDATE_USER);

                        END LOOP;
                        CLOSE CUR_PROJECTS;
                    END;
                    BEGIN
                        DELETE T1 FROM COI_DISCL_ENT_PROJ_DETAILS T1 INNER JOIN COI_DISCLOSURE T2 ON T1.DISCLOSURE_ID = T2.DISCLOSURE_ID
                            WHERE T1.PERSON_ENTITY_ID IS NULL AND T2.VERSION_STATUS = 'PENDING' AND T2.PERSON_ID = LI_PERSON_ID;
                    END;
                END LOOP;
                CLOSE CUR_ENTITIES;
            END;
        END IF;	
	END;
END
//