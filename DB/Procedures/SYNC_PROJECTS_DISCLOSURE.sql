DELIMITER //
CREATE PROCEDURE `SYNC_PROJECTS_DISCLOSURE`(
AV_DISCLOSURE_ID   	     INT(30),
AV_DISCLOSURE_NUMBER   	 INT(30),
AV_PERSON_ID             VARCHAR(45),
AV_UPDATE_USER           VARCHAR(45),
AV_PERSON_ENTITY_ID      VARCHAR(30)
)
BEGIN

DECLARE LI_PERSON_ENTITY_ID     VARCHAR(30);
DECLARE LI_ENTITY_ID            VARCHAR(30);
DECLARE LI_ENTITY_NUMBER        VARCHAR(30);
DECLARE LI_MODULE_CODE          VARCHAR(30);
DECLARE LI_MODULE_ITEM_KEY      VARCHAR(30);

    BEGIN 

        IF AV_PERSON_ENTITY_ID IS NULL THEN
        BEGIN 
            DECLARE DONE1 INT DEFAULT FALSE;
                                        
            DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER FROM PERSON_ENTITY WHERE PERSON_ID = AV_PERSON_ID;

            DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                            
            OPEN CUR_ENTITIES;
            ENTITIES_LOOP: LOOP 
            FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER;

                IF DONE1 THEN
                    LEAVE ENTITIES_LOOP;
                END IF;
                
                call FN_SYNC_SFI_WITH_FCOI_DISC(1, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
                call FN_SYNC_SFI_WITH_FCOI_DISC(3, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
        
            END LOOP;
            CLOSE CUR_ENTITIES;
            END;
		/* ELSEIF AV_PERSON_ENTITY_ID <> '' AND AV_DISCLOSURE_ID IS NULL THEN
        BEGIN
            DECLARE DONE1 INT DEFAULT FALSE;
                                        
            DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER FROM PERSON_ENTITY WHERE PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID;

            DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                            
            OPEN CUR_ENTITIES;
            ENTITIES_LOOP: LOOP 
            FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER;

                IF DONE1 THEN
                    LEAVE ENTITIES_LOOP;
                END IF;
                
                call FN_SYNC_SFI_WITH_FCOI_DISC(1, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
                call FN_SYNC_SFI_WITH_FCOI_DISC(3, AV_PERSON_ID, AV_UPDATE_USER, AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER);
        
            END LOOP;
            CLOSE CUR_ENTITIES;
            END; */
        ELSEIF AV_PERSON_ENTITY_ID <> '' AND AV_DISCLOSURE_ID IS NOT NULL THEN
        BEGIN
            DECLARE DONE1 INT DEFAULT FALSE;
                                        
            DECLARE CUR_ENTITIES CURSOR FOR SELECT DISTINCT PERSON_ENTITY_ID, ENTITY_ID, ENTITY_NUMBER FROM PERSON_ENTITY WHERE PERSON_ENTITY_ID = AV_PERSON_ENTITY_ID;

            DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                            
            OPEN CUR_ENTITIES;
            ENTITIES_LOOP: LOOP 
            FETCH CUR_ENTITIES INTO  LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER;

                IF DONE1 THEN
                    LEAVE ENTITIES_LOOP;
                END IF;

                BEGIN
                    DECLARE DONE2 INT DEFAULT FALSE;
                    
                    DECLARE CUR_PROJECTS CURSOR FOR SELECT DISTINCT MODULE_ITEM_KEY, MODULE_CODE FROM COI_DISCL_ENT_PROJ_DETAILS WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID;
                    DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
                                
                    OPEN CUR_PROJECTS;
                    PROJECTS_LOOP: LOOP 
                    FETCH CUR_PROJECTS INTO  LI_MODULE_ITEM_KEY, LI_MODULE_CODE;
            
                        IF DONE1 THEN
                            LEAVE PROJECTS_LOOP;
                        END IF;

                        INSERT INTO COI_DISCL_ENT_PROJ_DETAILS(`DISCLOSURE_ID`, `DISCLOSURE_NUMBER`, `PERSON_ENTITY_ID`, `ENTITY_ID`, `ENTITY_NUMBER`, `MODULE_CODE`, `MODULE_ITEM_KEY`, 
                            `UPDATE_TIMESTAMP`, `UPDATE_USER`) VALUES(AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, LI_PERSON_ENTITY_ID, LI_ENTITY_ID, LI_ENTITY_NUMBER, LI_MODULE_CODE,
                            LI_MODULE_ITEM_KEY, now(), AV_UPDATE_USER);

                    END LOOP;
                    CLOSE CUR_PROJECTS;
                END;
            END LOOP;
            CLOSE CUR_ENTITIES;
            END;
        END IF;	
	END;
END
//