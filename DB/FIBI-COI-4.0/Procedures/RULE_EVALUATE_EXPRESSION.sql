DELIMITER //
CREATE PROCEDURE `RULE_EVALUATE_EXPRESSION`(
AV_MODULE_CODE           DECIMAL(38,0),
AV_SUBMODULE_CODE        DECIMAL(38,0),
AV_MODULE_ITEM_KEY       VARCHAR(200),
AV_RULE_ID 	             DECIMAL(38,0),
AV_RULE_EXPR             VARCHAR(200),
AV_UPDATE_USER           VARCHAR(200),
AV_LOGGIN_PERSON_ID      VARCHAR(200),
AV_SUB_MODULE_ITEM_KEY   VARCHAR(20),
OUT LS_RESULT_EXP VARCHAR(200))
    DETERMINISTIC
BEGIN
PROC_LABEL:BEGIN
DECLARE LS_EXPR_RESULT VARCHAR(50);
DECLARE LS_EXPRESSION  LONGTEXT;
DECLARE LS_RESULT      VARCHAR(10); 
DECLARE LS_ERROR       VARCHAR(1000);
DECLARE LS_RULES_EXPERSSION_ID INT(10);
DECLARE LS_EXPRESSION_TYPE_CODE VARCHAR(1);
DECLARE LS_EXPRESSION_NUMBER INT(3);
DECLARE LS_SEQ_RULE_LOG_ID INT(10);

DECLARE LS_CODE CHAR(5) DEFAULT '00000';
DECLARE LS_MSG TEXT;


DECLARE DONE1 INT DEFAULT FALSE;

DECLARE EXP_CURSOR CURSOR FOR 
SELECT RULES_EXPERSSION_ID,EXPRESSION_TYPE_CODE,EXPRESSION_NUMBER 
FROM BUSINESS_RULES_EXPERSSION
WHERE RULE_ID = AV_RULE_ID;

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
BEGIN
  GET DIAGNOSTICS CONDITION 1
	LS_CODE = RETURNED_SQLSTATE, LS_MSG = MESSAGE_TEXT;
END;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE1 = TRUE;
SET LS_EXPRESSION =AV_RULE_EXPR;
OPEN EXP_CURSOR;

EXP_CURSOR_LOOP : LOOP
        FETCH EXP_CURSOR INTO LS_RULES_EXPERSSION_ID,LS_EXPRESSION_TYPE_CODE,LS_EXPRESSION_NUMBER;
		IF DONE1 THEN
			LEAVE EXP_CURSOR_LOOP;
		END IF;
        
        IF LS_EXPRESSION_TYPE_CODE = 'V' THEN 

            CALL RULE_EVALUATE_VARIABLE(LS_RULES_EXPERSSION_ID,   
                                                        AV_MODULE_CODE,
                                                        AV_SUBMODULE_CODE,
                                                        AV_MODULE_ITEM_KEY,
														AV_SUB_MODULE_ITEM_KEY,
                                                        @EXPR_RESULT
                                                        );

            SET LS_EXPR_RESULT = @EXPR_RESULT;
          ELSEIF LS_EXPRESSION_TYPE_CODE = 'F' THEN 

            CALL RULE_EVALUATE_FUNCTION(				AV_RULE_ID,
														LS_RULES_EXPERSSION_ID,   
                                                        AV_MODULE_CODE,
                                                        AV_SUBMODULE_CODE,
                                                        AV_MODULE_ITEM_KEY,
                                                        AV_UPDATE_USER,
                                                        AV_LOGGIN_PERSON_ID,
														AV_SUB_MODULE_ITEM_KEY,
                                                        @EXPR_RESULT
                                                        );
			SET LS_EXPR_RESULT = @EXPR_RESULT;
	ELSEIF LS_EXPRESSION_TYPE_CODE = 'Q' THEN 

            CALL RULE_EVALUATE_QUESTION(LS_RULES_EXPERSSION_ID,   
                                                        AV_MODULE_CODE,
                                                        AV_SUBMODULE_CODE,
                                                        AV_MODULE_ITEM_KEY,
														AV_SUB_MODULE_ITEM_KEY,
                                                        @EXPR_RESULT
                                                       );
			SET LS_EXPR_RESULT = @EXPR_RESULT;
        END IF;

	IF LS_CODE <> '00000' THEN
            SET LS_ERROR = SUBSTR(LS_MSG,1,999);
        
			SELECT CASE WHEN MAX(RULE_LOG_ID) IS NULL  THEN 1 
                        ELSE MAX(RULE_LOG_ID)+1 END 
            INTO LS_SEQ_RULE_LOG_ID FROM BUSINESS_RULE_LOG;
			
			INSERT INTO BUSINESS_RULE_LOG 
				(
					RULE_LOG_ID,
					MODULE_ITEM_KEY,
					RULE_ID,
					RULE_EXPRESSION_ID,
					ERROR_MESSAGE,
					ERROR_DATE,
					MODULE_CODE,
					SUB_MODULE_CODE,
					SUB_MODULE_ITEM_KEY
				)
				VALUES(
					LS_SEQ_RULE_LOG_ID,
					AV_MODULE_ITEM_KEY,
					AV_RULE_ID,
					LS_RULES_EXPERSSION_ID,
					LS_ERROR,
					UTC_TIMESTAMP(),
					AV_MODULE_CODE,
					AV_SUBMODULE_CODE,
					AV_SUB_MODULE_ITEM_KEY
				);


				 SELECT '-1' INTO LS_RESULT_EXP;
                 LEAVE PROC_LABEL;
                
     END IF;
    SET LS_EXPRESSION = REPLACE(LS_EXPRESSION,CONCAT(' E',LS_EXPRESSION_NUMBER,' '),CONCAT(' ',LS_EXPR_RESULT,' '));
    END LOOP;
    

CLOSE EXP_CURSOR;

CALL RULE_VERIFY_EXPRESSION(LS_EXPRESSION,@RESULT_EXP);
SET LS_RESULT = @RESULT_EXP;
        
IF LS_CODE <> '00000' THEN
    
                SET LS_ERROR = SUBSTR(LS_MSG,1,999);
				SELECT (CASE WHEN MAX(RULE_LOG_ID) IS NULL THEN 1 ELSE MAX(RULE_LOG_ID)+1 END ) INTO LS_SEQ_RULE_LOG_ID FROM BUSINESS_RULE_LOG;
				INSERT INTO BUSINESS_RULE_LOG 
				(
					RULE_LOG_ID,
					MODULE_ITEM_KEY,
					RULE_ID,
					RULE_EXPRESSION_ID,
					ERROR_MESSAGE,
					ERROR_DATE,
					MODULE_CODE,
					SUB_MODULE_CODE,
					SUB_MODULE_ITEM_KEY
				)
				VALUES(
					LS_SEQ_RULE_LOG_ID,
					AV_MODULE_ITEM_KEY,
					AV_RULE_ID,
					CONCAT('RULE_VERIFY_EXPRESSION:',LS_EXPRESSION),
					LS_ERROR,
					UTC_TIMESTAMP(),
					AV_MODULE_CODE,
					AV_SUBMODULE_CODE,
					AV_SUB_MODULE_ITEM_KEY
				);

                SELECT '-1' INTO LS_RESULT_EXP;
                LEAVE PROC_LABEL;
END IF;

SELECT LS_RESULT INTO LS_RESULT_EXP;

END;
END
//
