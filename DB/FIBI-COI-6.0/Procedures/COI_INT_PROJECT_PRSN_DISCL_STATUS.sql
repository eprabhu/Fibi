DELIMITER //
CREATE PROCEDURE COI_INT_PROJECT_PRSN_DISCL_STATUS(
    IN AV_PROJECT_NUMBER    VARCHAR(12),
    IN AV_PERSON_ID         VARCHAR(60)
)
PROC:BEGIN
   
    DECLARE LS_DISCLOSURE_VALIDATION_FLAG VARCHAR(60);
    DECLARE LS_DISCLOSURE_REQUIRED_FLAG   VARCHAR(20);
    DECLARE LS_LATEST_PROJECT_NUMBER      VARCHAR(12);
    DECLARE LS_EXPIRATION_DATE            VARCHAR(30);
    DECLARE LS_REVIEW_STATUS_CODE         VARCHAR(3);
    DECLARE LS_DISPOSITION_STATUS_CODE    VARCHAR(3);
	DECLARE LI_DISCLOSURE_ID 			  INT;
    
	   SELECT CISAP.DISCLOSURE_VALIDATION_FLAG 
       INTO LS_DISCLOSURE_VALIDATION_FLAG 
       FROM COI_INT_STAGE_AWARD CISAP
       WHERE CISAP.PROJECT_NUMBER = AV_PROJECT_NUMBER; 
       
       
       IF LS_DISCLOSURE_VALIDATION_FLAG IS NULL THEN 
			SELECT NULL AS DISCLOSURE_ID, 'No Data Found.' AS DISCLOSURE_STATUS;
            LEAVE PROC; 
		END IF;   
       
   
   IF UPPER(LS_DISCLOSURE_VALIDATION_FLAG) = 'HIERARCHY' THEN
	
        SELECT PROJECT_NUMBER INTO LS_LATEST_PROJECT_NUMBER
        FROM COI_INT_STAGE_AWARD CISA
        WHERE CISA.PROJECT_NUMBER LIKE CONCAT(SUBSTRING_INDEX(AV_PROJECT_NUMBER, '-', 1), '%')
        AND CISA.PROJECT_ID = (SELECT MAX(PROJECT_ID) 
                               FROM COI_INT_STAGE_AWARD 
                               WHERE PROJECT_NUMBER LIKE CONCAT(SUBSTRING_INDEX(AV_PROJECT_NUMBER, '-', 1), '%'));
							   
    ELSEIF UPPER(LS_DISCLOSURE_VALIDATION_FLAG) = 'SELF' THEN 
        SET LS_LATEST_PROJECT_NUMBER = AV_PROJECT_NUMBER;	   
    END IF;
    
       SELECT CISAP.DISCLOSURE_REQUIRED_FLAG
       INTO LS_DISCLOSURE_REQUIRED_FLAG
       FROM COI_INT_STAGE_AWARD_PERSON CISAP
       WHERE CISAP.PROJECT_NUMBER = LS_LATEST_PROJECT_NUMBER
       AND CISAP.KEY_PERSON_ID = AV_PERSON_ID; 
	    
    IF LS_DISCLOSURE_REQUIRED_FLAG IS NULL THEN 
        SELECT NULL AS DISCLOSURE_ID, 'No Data Found.' AS DISCLOSURE_STATUS;
        LEAVE PROC; 
    ELSEIF LS_DISCLOSURE_REQUIRED_FLAG = 'NOT_REQUIRED' THEN
        SELECT NULL AS DISCLOSURE_ID, 'Disclosure Not Required.' AS DISCLOSURE_STATUS;
        LEAVE PROC; 
    END IF;



    SELECT CD.REVIEW_STATUS_CODE, CD.EXPIRATION_DATE, CD.DISPOSITION_STATUS_CODE,CD.DISCLOSURE_ID
    INTO LS_REVIEW_STATUS_CODE, LS_EXPIRATION_DATE, LS_DISPOSITION_STATUS_CODE,LI_DISCLOSURE_ID
    FROM COI_DISCL_PROJECTS CDP
    INNER JOIN COI_DISCLOSURE CD ON CD.DISCLOSURE_ID = CDP.DISCLOSURE_ID
    INNER JOIN COI_REVIEW_STATUS_TYPE CRST ON CRST.REVIEW_STATUS_CODE = CD.REVIEW_STATUS_CODE
    WHERE CDP.MODULE_CODE = '1'
      AND CD.FCOI_TYPE_CODE = '2' 
      AND CDP.MODULE_ITEM_KEY = LS_LATEST_PROJECT_NUMBER
      AND CD.PERSON_ID = AV_PERSON_ID
      AND CD.DISPOSITION_STATUS_CODE <> 2
      AND CD.DISCLOSURE_ID = (SELECT MAX(CD2.DISCLOSURE_ID)
                              FROM COI_DISCLOSURE CD2
                              INNER JOIN COI_DISCL_PROJECTS CDP2 ON CDP2.DISCLOSURE_ID = CD2.DISCLOSURE_ID
                              WHERE CDP2.MODULE_CODE = CDP.MODULE_CODE
                                AND CD2.FCOI_TYPE_CODE = CD.FCOI_TYPE_CODE
                                AND CDP2.MODULE_ITEM_KEY = CDP.MODULE_ITEM_KEY
                                AND CD2.PERSON_ID = CD.PERSON_ID
                                AND CD2.DISPOSITION_STATUS_CODE <> 2);

    IF LS_EXPIRATION_DATE IS NULL OR LS_REVIEW_STATUS_CODE IS NULL THEN
        SELECT CD.REVIEW_STATUS_CODE, CD.EXPIRATION_DATE, CD.DISPOSITION_STATUS_CODE,CD.DISCLOSURE_ID
        INTO LS_REVIEW_STATUS_CODE, LS_EXPIRATION_DATE, LS_DISPOSITION_STATUS_CODE,LI_DISCLOSURE_ID
        FROM COI_DISCL_PROJECTS CDP
        INNER JOIN COI_DISCLOSURE CD ON CD.DISCLOSURE_ID = CDP.DISCLOSURE_ID
        INNER JOIN COI_REVIEW_STATUS_TYPE CRST ON CRST.REVIEW_STATUS_CODE = CD.REVIEW_STATUS_CODE
        WHERE CDP.MODULE_CODE = '1'
          AND (CD.FCOI_TYPE_CODE = '1' OR CD.FCOI_TYPE_CODE = '3')
          AND CDP.MODULE_ITEM_KEY = LS_LATEST_PROJECT_NUMBER
          AND CD.PERSON_ID = AV_PERSON_ID
          AND CD.DISPOSITION_STATUS_CODE <> 2
          AND CD.DISCLOSURE_ID = (SELECT MAX(CD2.DISCLOSURE_ID)
                                  FROM COI_DISCLOSURE CD2
                                  INNER JOIN COI_DISCL_PROJECTS CDP2 ON CDP2.DISCLOSURE_ID = CD2.DISCLOSURE_ID
                                  WHERE CDP2.MODULE_CODE = CDP.MODULE_CODE
                                    AND CD2.FCOI_TYPE_CODE = CD.FCOI_TYPE_CODE
                                    AND CDP2.MODULE_ITEM_KEY = CDP.MODULE_ITEM_KEY
                                    AND CD2.PERSON_ID = CD.PERSON_ID
                                    AND CD2.DISPOSITION_STATUS_CODE <> 2);
    END IF;

    IF LS_REVIEW_STATUS_CODE IS NULL THEN     
		SELECT NULL AS DISCLOSURE_ID, 'Disclosure Yet to Disclose.' AS DISCLOSURE_STATUS;		
        LEAVE PROC; 
    END IF;

    IF LS_EXPIRATION_DATE IS NULL THEN
        SELECT LI_DISCLOSURE_ID AS DISCLOSURE_ID, 'Review Is Not Complete.' AS DISCLOSURE_STATUS;
        LEAVE PROC; 
    END IF;

    IF LS_REVIEW_STATUS_CODE > '1' THEN
        IF LS_REVIEW_STATUS_CODE = '4' AND LS_DISPOSITION_STATUS_CODE = '3' THEN 
            IF DATE_FORMAT(LS_EXPIRATION_DATE, '%Y-%m-%d') < DATE_FORMAT(CURDATE(), '%Y-%m-%d') THEN
				SELECT LI_DISCLOSURE_ID AS DISCLOSURE_ID, 'Disclosure expired.' AS DISCLOSURE_STATUS;
                LEAVE PROC; 
            END IF;
        ELSE 
            
			SELECT LI_DISCLOSURE_ID AS DISCLOSURE_ID, 'Review Is Not Complete.' AS DISCLOSURE_STATUS;
            LEAVE PROC; 
        END IF;
    ELSE
        
		SELECT LI_DISCLOSURE_ID AS DISCLOSURE_ID,'Review Is Not Complete.' AS DISCLOSURE_STATUS;
        LEAVE PROC; 
    END IF;
 
	SELECT LI_DISCLOSURE_ID AS DISCLOSURE_ID,'Review Completed.' AS DISCLOSURE_STATUS;

    
END;
//
