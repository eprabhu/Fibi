DELIMITER //

CREATE PROCEDURE `COI_SYNC_FCOI_DISCLOSURE`(
    IN AV_DISCLOSURE_ID INT,
	IN AV_DISCLOSURE_NUMBER INT,
    IN AV_PERSON_ID VARCHAR(40)
)
BEGIN

DECLARE LI_PERSON_ID            VARCHAR(40);
DECLARE LI_DISCLOSURE_STATUS    INT(3);
DECLARE LI_LOCK_ACQUIRED 		INT 	DEFAULT 0;
DECLARE LI_FCOI_TYPE_CODE		INT(3);
DECLARE ERRMSG 					TEXT DEFAULT '';

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	UPDATE COI_DISCLOSURE SET SYNC_NEEDED = "Y" WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID;

	 GET DIAGNOSTICS CONDITION 1
    ERRMSG = MESSAGE_TEXT;

    SET LI_LOCK_ACQUIRED = RELEASE_LOCK('coi_sfi_projects_lock');

    -- Handle NULL MESSAGE_TEXT
    IF ERRMSG IS NULL THEN
        SET ERRMSG = 'Unknown error occurred';
    END IF;

    RESIGNAL SET MESSAGE_TEXT = ERRMSG;
END;

SELECT GET_LOCK('coi_sfi_projects_lock', 30) INTO LI_LOCK_ACQUIRED;
IF LI_LOCK_ACQUIRED = 1 THEN

    BEGIN

		SELECT REVIEW_STATUS_CODE, PERSON_ID, FCOI_TYPE_CODE INTO LI_DISCLOSURE_STATUS, LI_PERSON_ID, LI_FCOI_TYPE_CODE FROM COI_DISCLOSURE WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID;

		IF LI_PERSON_ID != AV_PERSON_ID THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Disclosure person id is not matching with attempting person id.';
		END IF;

		-- Sync Primary consition
		IF FIND_IN_SET(LI_DISCLOSURE_STATUS, '1,5,6') < 1 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Disclosure Status code is not In Progress/Withdrawn/Returned state. Exiting procedure.';
		END IF;

		IF LI_FCOI_TYPE_CODE != 2 THEN
			START TRANSACTION;
				UPDATE COI_DISCL_PROJECTS T1
				INNER JOIN COI_PROJECT_INSTITUTE_PROPOSAL_V T2 ON T2.PROPOSAL_NUMBER = T1.MODULE_ITEM_KEY AND T1.MODULE_CODE = 2
				SET T1.MODULE_ITEM_KEY = T2.LINKED_AWARD_PROJECT_NUMBER
				WHERE T1.MODULE_CODE = 2 AND T2.LINKED_AWARD_PROJECT_NUMBER IS NOT NUll AND T1.DISCLOSURE_ID = AV_DISCLOSURE_ID;
			COMMIT;
			START TRANSACTION;
				CALL COI_SYNC_INSERT_DISCL_PROJECTS(AV_DISCLOSURE_ID, AV_DISCLOSURE_NUMBER, AV_PERSON_ID);
			COMMIT;
		END IF;

		START TRANSACTION;
			DELETE T1, T5, T6, T7
			FROM COI_DISCL_PROJECTS T1
			LEFT JOIN COI_DISCL_PROJECT_ENTITY_REL T2 ON T2.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID
			LEFT JOIN DISCL_COMMENT T5 ON T5.SUB_MODULE_ITEM_KEY = T2.COI_DISCL_PROJECT_ENTITY_REL_ID
				AND (T5.COMPONENT_TYPE_CODE = '1' OR T5.COMPONENT_TYPE_CODE = '6')
			LEFT JOIN DISCL_COMMENT T6 ON T6.SUB_MODULE_ITEM_KEY = T2.COI_DISCL_PROJECT_ENTITY_REL_ID
				AND (T6.COMPONENT_TYPE_CODE = '1' OR T6.COMPONENT_TYPE_CODE = '6')
			LEFT JOIN DISCL_COMMENT T7 ON T7.SUB_MODULE_ITEM_KEY = T2.COI_DISCL_PROJECT_ENTITY_REL_ID
				AND (T7.COMPONENT_TYPE_CODE = '1' OR T7.COMPONENT_TYPE_CODE = '6')
			WHERE T1.DISCLOSURE_ID = AV_DISCLOSURE_ID
				AND (
					(T1.MODULE_CODE = 3 AND T1.MODULE_ITEM_KEY NOT IN (
						SELECT EXTERNAL_SYSTEM_REF_ID
						FROM COI_PROJECT_PROPOSAL_V
						WHERE KEY_PERSON_ID = AV_PERSON_ID
					))
					OR
					(T1.MODULE_CODE = 2 AND T1.MODULE_ITEM_KEY NOT IN (
						SELECT EXTERNAL_SYSTEM_REF_ID
						FROM COI_PROJECT_INSTITUTE_PROPOSAL_V
						WHERE KEY_PERSON_ID = AV_PERSON_ID
					))
					OR
					(T1.MODULE_CODE = 1 AND T1.MODULE_ITEM_KEY NOT IN (
						SELECT PROPOSAL_NUMBER
						FROM COI_PROJECT_AWARD_V
						WHERE KEY_PERSON_ID = AV_PERSON_ID
					))
				);
		COMMIT;


		START TRANSACTION;
			UPDATE COI_DISCL_PROJECT_ENTITY_REL AS T
				INNER JOIN COI_DISCL_PROJECTS T0 ON T0.COI_DISCL_PROJECTS_ID = T.COI_DISCL_PROJECTS_ID
				JOIN(SELECT DISTINCT T1.PERSON_ENTITY_ID AS PREVIOUS_PERSON_ENTITY_ID,T2.PERSON_ENTITY_ID, T1.PERSON_ENTITY_NUMBER
						FROM COI_DISCL_PROJECT_ENTITY_REL T1
						INNER JOIN COI_DISCL_PROJECTS T ON T.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID
						INNER JOIN PERSON_ENTITY T2 ON T2.PERSON_ENTITY_NUMBER = T1.PERSON_ENTITY_NUMBER
						INNER JOIN PERSON_ENTITY_RELATIONSHIP T3 ON T3.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID
						INNER JOIN VALID_PERSON_ENTITY_REL_TYPE T4 ON T4.VALID_PERS_ENTITY_REL_TYP_CODE = T3.VALID_PERS_ENTITY_REL_TYP_CODE
						WHERE T2.VERSION_STATUS='ACTIVE' AND T4.DISCLOSURE_TYPE_CODE = '1' AND T1.PERSON_ENTITY_ID != T2.PERSON_ENTITY_ID
						AND T.DISCLOSURE_ID = AV_DISCLOSURE_ID
					) AS T6 ON T6.PERSON_ENTITY_NUMBER = T.PERSON_ENTITY_NUMBER
				SET T.PREVIOUS_PERSON_ENTITY_ID = T6.PREVIOUS_PERSON_ENTITY_ID, T.PERSON_ENTITY_ID = T6.PERSON_ENTITY_ID, T.UPDATE_TIMESTAMP = utc_timestamp()
				WHERE T.PERSON_ENTITY_NUMBER = T6.PERSON_ENTITY_NUMBER AND T0.DISCLOSURE_ID = AV_DISCLOSURE_ID;
		COMMIT;


		/* START TRANSACTION;
			INSERT INTO COI_DISCL_PROJECT_ENTITY_REL (`COI_DISCL_PROJECTS_ID`, `PERSON_ENTITY_ID`, `PERSON_ENTITY_NUMBER`, `ENTITY_ID`, `UPDATE_TIMESTAMP`, `UPDATED_BY`)
				SELECT DISTINCT T1.COI_DISCL_PROJECTS_ID, T2.PERSON_ENTITY_ID, T2.PERSON_ENTITY_NUMBER, T2.ENTITY_ID, utc_timestamp(), AV_PERSON_ID
				FROM COI_DISCL_PROJECTS T1
				RIGHT JOIN (SELECT t1.PERSON_ENTITY_ID, t1.PERSON_ENTITY_NUMBER, t1.ENTITY_ID
					FROM PERSON_ENTITY t1
					INNER JOIN PERSON_ENTITY_RELATIONSHIP t2 ON t2.PERSON_ENTITY_ID = t1.PERSON_ENTITY_ID
					INNER JOIN VALID_PERSON_ENTITY_REL_TYPE t3 ON t3.VALID_PERS_ENTITY_REL_TYP_CODE = t2.VALID_PERS_ENTITY_REL_TYP_CODE
					WHERE t1.PERSON_ENTITY_NUMBER NOT IN (
						SELECT DISTINCT T3.PERSON_ENTITY_NUMBER
						FROM COI_DISCL_PROJECT_ENTITY_REL T3
						INNER JOIN COI_DISCL_PROJECTS T4 ON T3.COI_DISCL_PROJECTS_ID = T4.COI_DISCL_PROJECTS_ID
						WHERE T4.DISCLOSURE_ID = AV_DISCLOSURE_ID
					)AND t1.VERSION_STATUS = 'ACTIVE' AND t3.DISCLOSURE_TYPE_CODE = '1' AND t1.PERSON_ID = AV_PERSON_ID
				) T2 ON T2.PERSON_ENTITY_ID IS NOT NULL
				WHERE T1.DISCLOSURE_ID = AV_DISCLOSURE_ID;
		COMMIT; */

		START TRANSACTION;
			INSERT INTO COI_DISCL_PROJECT_ENTITY_REL (`COI_DISCL_PROJECTS_ID`, `PERSON_ENTITY_ID`, `PERSON_ENTITY_NUMBER`, `ENTITY_ID`, `UPDATE_TIMESTAMP`, `UPDATED_BY`)
				SELECT DISTINCT T1.COI_DISCL_PROJECTS_ID, T2.PERSON_ENTITY_ID, T2.PERSON_ENTITY_NUMBER, T2.ENTITY_ID, utc_timestamp(), AV_PERSON_ID
				FROM COI_DISCL_PROJECTS T1
				INNER JOIN (SELECT t1.PERSON_ENTITY_ID, t1.PERSON_ENTITY_NUMBER, t1.ENTITY_ID
					FROM PERSON_ENTITY t1
					INNER JOIN PERSON_ENTITY_RELATIONSHIP t2 ON t2.PERSON_ENTITY_ID = t1.PERSON_ENTITY_ID
					INNER JOIN VALID_PERSON_ENTITY_REL_TYPE t3 ON t3.VALID_PERS_ENTITY_REL_TYP_CODE = t2.VALID_PERS_ENTITY_REL_TYP_CODE
					WHERE t1.VERSION_STATUS = 'ACTIVE' AND t3.DISCLOSURE_TYPE_CODE = '1' AND t1.PERSON_ID = AV_PERSON_ID
				) T2 ON T1.COI_DISCL_PROJECTS_ID IS NOT NULL
				LEFT JOIN COI_DISCL_PROJECT_ENTITY_REL T3 ON T3.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID AND T3.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID
				WHERE T1.DISCLOSURE_ID = AV_DISCLOSURE_ID AND T3.COI_DISCL_PROJECTS_ID IS NULL;
		COMMIT;

		START TRANSACTION;
			DELETE T2, T FROM COI_DISCL_PROJECT_ENTITY_REL T
				INNER JOIN COI_DISCL_PROJECTS T0 ON T0.COI_DISCL_PROJECTS_ID = T.COI_DISCL_PROJECTS_ID
				LEFT JOIN  DISCL_COMMENT T2 ON T2.SUB_MODULE_ITEM_KEY = T.COI_DISCL_PROJECT_ENTITY_REL_ID AND (T2.COMPONENT_TYPE_CODE = '1' OR T2.COMPONENT_TYPE_CODE = '6')
				INNER JOIN (
					SELECT DISTINCT T2.PERSON_ENTITY_ID, T1.PERSON_ENTITY_NUMBER
					FROM COI_DISCL_PROJECT_ENTITY_REL T1
					INNER JOIN COI_DISCL_PROJECTS t0 ON t0.COI_DISCL_PROJECTS_ID = T1.COI_DISCL_PROJECTS_ID
					INNER JOIN PERSON_ENTITY T2 ON T2.PERSON_ENTITY_NUMBER = T1.PERSON_ENTITY_NUMBER
					LEFT JOIN PERSON_ENTITY_RELATIONSHIP T3 ON T3.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID
					LEFT JOIN VALID_PERSON_ENTITY_REL_TYPE T4 ON T4.VALID_PERS_ENTITY_REL_TYP_CODE = T3.VALID_PERS_ENTITY_REL_TYP_CODE
					WHERE (T2.VERSION_STATUS='INACTIVE' OR T3.PERSON_ENTITY_ID IS NULL
						OR NOT EXISTS (
							SELECT 1 FROM PERSON_ENTITY_RELATIONSHIP T3_1
							INNER JOIN VALID_PERSON_ENTITY_REL_TYPE T4_1 ON T4_1.VALID_PERS_ENTITY_REL_TYP_CODE = T3_1.VALID_PERS_ENTITY_REL_TYP_CODE
							WHERE T3_1.PERSON_ENTITY_ID = T2.PERSON_ENTITY_ID AND T4_1.DISCLOSURE_TYPE_CODE = '1'
						)
					) AND T1.PERSON_ENTITY_NUMBER = T2.PERSON_ENTITY_NUMBER
					AND T2.VERSION_STATUS != 'ARCHIVE' AND t0.DISCLOSURE_ID = AV_DISCLOSURE_ID
				) AS T3 ON T3.PERSON_ENTITY_NUMBER = T.PERSON_ENTITY_NUMBER
				WHERE T.PERSON_ENTITY_NUMBER = T3.PERSON_ENTITY_NUMBER AND T0.DISCLOSURE_ID = AV_DISCLOSURE_ID;
		COMMIT;

		UPDATE COI_DISCLOSURE SET SYNC_NEEDED = "N" WHERE DISCLOSURE_ID = AV_DISCLOSURE_ID;

	END;
	SET LI_LOCK_ACQUIRED = RELEASE_LOCK('coi_sfi_projects_lock');
	SELECT '1';
	ELSE
        SELECT 'Unable to acquire lock. Another process may sync the projects vs entity.';

	END IF;
END
//
